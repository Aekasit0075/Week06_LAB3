
Week 06 InputCaptureOutputCompare.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ca0  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004e38  08004e38  00014e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e58  08004e58  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004e58  08004e58  00014e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e60  08004e60  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e60  08004e60  00014e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e64  08004e64  00014e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004e68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  20000014  08004e7c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  08004e7c  0002022c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d89b  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b90  00000000  00000000  0002d8df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  0002f470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b88  00000000  00000000  00030090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001575f  00000000  00000000  00030c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d649  00000000  00000000  00046377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a249  00000000  00000000  000539c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ddc09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003458  00000000  00000000  000ddc5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000014 	.word	0x20000014
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004e20 	.word	0x08004e20

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000018 	.word	0x20000018
 80001d4:	08004e20 	.word	0x08004e20

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295
 8000a28:	f000 b974 	b.w	8000d14 <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	9d08      	ldr	r5, [sp, #32]
 8000a4a:	4604      	mov	r4, r0
 8000a4c:	468e      	mov	lr, r1
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d14d      	bne.n	8000aee <__udivmoddi4+0xaa>
 8000a52:	428a      	cmp	r2, r1
 8000a54:	4694      	mov	ip, r2
 8000a56:	d969      	bls.n	8000b2c <__udivmoddi4+0xe8>
 8000a58:	fab2 f282 	clz	r2, r2
 8000a5c:	b152      	cbz	r2, 8000a74 <__udivmoddi4+0x30>
 8000a5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a62:	f1c2 0120 	rsb	r1, r2, #32
 8000a66:	fa20 f101 	lsr.w	r1, r0, r1
 8000a6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a72:	4094      	lsls	r4, r2
 8000a74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a78:	0c21      	lsrs	r1, r4, #16
 8000a7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a7e:	fa1f f78c 	uxth.w	r7, ip
 8000a82:	fb08 e316 	mls	r3, r8, r6, lr
 8000a86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a8a:	fb06 f107 	mul.w	r1, r6, r7
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	d90a      	bls.n	8000aa8 <__udivmoddi4+0x64>
 8000a92:	eb1c 0303 	adds.w	r3, ip, r3
 8000a96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a9a:	f080 811f 	bcs.w	8000cdc <__udivmoddi4+0x298>
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	f240 811c 	bls.w	8000cdc <__udivmoddi4+0x298>
 8000aa4:	3e02      	subs	r6, #2
 8000aa6:	4463      	add	r3, ip
 8000aa8:	1a5b      	subs	r3, r3, r1
 8000aaa:	b2a4      	uxth	r4, r4
 8000aac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ab0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ab4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab8:	fb00 f707 	mul.w	r7, r0, r7
 8000abc:	42a7      	cmp	r7, r4
 8000abe:	d90a      	bls.n	8000ad6 <__udivmoddi4+0x92>
 8000ac0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ac8:	f080 810a 	bcs.w	8000ce0 <__udivmoddi4+0x29c>
 8000acc:	42a7      	cmp	r7, r4
 8000ace:	f240 8107 	bls.w	8000ce0 <__udivmoddi4+0x29c>
 8000ad2:	4464      	add	r4, ip
 8000ad4:	3802      	subs	r0, #2
 8000ad6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ada:	1be4      	subs	r4, r4, r7
 8000adc:	2600      	movs	r6, #0
 8000ade:	b11d      	cbz	r5, 8000ae8 <__udivmoddi4+0xa4>
 8000ae0:	40d4      	lsrs	r4, r2
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ae8:	4631      	mov	r1, r6
 8000aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aee:	428b      	cmp	r3, r1
 8000af0:	d909      	bls.n	8000b06 <__udivmoddi4+0xc2>
 8000af2:	2d00      	cmp	r5, #0
 8000af4:	f000 80ef 	beq.w	8000cd6 <__udivmoddi4+0x292>
 8000af8:	2600      	movs	r6, #0
 8000afa:	e9c5 0100 	strd	r0, r1, [r5]
 8000afe:	4630      	mov	r0, r6
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	fab3 f683 	clz	r6, r3
 8000b0a:	2e00      	cmp	r6, #0
 8000b0c:	d14a      	bne.n	8000ba4 <__udivmoddi4+0x160>
 8000b0e:	428b      	cmp	r3, r1
 8000b10:	d302      	bcc.n	8000b18 <__udivmoddi4+0xd4>
 8000b12:	4282      	cmp	r2, r0
 8000b14:	f200 80f9 	bhi.w	8000d0a <__udivmoddi4+0x2c6>
 8000b18:	1a84      	subs	r4, r0, r2
 8000b1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b1e:	2001      	movs	r0, #1
 8000b20:	469e      	mov	lr, r3
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	d0e0      	beq.n	8000ae8 <__udivmoddi4+0xa4>
 8000b26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b2a:	e7dd      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000b2c:	b902      	cbnz	r2, 8000b30 <__udivmoddi4+0xec>
 8000b2e:	deff      	udf	#255	; 0xff
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	2a00      	cmp	r2, #0
 8000b36:	f040 8092 	bne.w	8000c5e <__udivmoddi4+0x21a>
 8000b3a:	eba1 010c 	sub.w	r1, r1, ip
 8000b3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b42:	fa1f fe8c 	uxth.w	lr, ip
 8000b46:	2601      	movs	r6, #1
 8000b48:	0c20      	lsrs	r0, r4, #16
 8000b4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b56:	fb0e f003 	mul.w	r0, lr, r3
 8000b5a:	4288      	cmp	r0, r1
 8000b5c:	d908      	bls.n	8000b70 <__udivmoddi4+0x12c>
 8000b5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0x12a>
 8000b68:	4288      	cmp	r0, r1
 8000b6a:	f200 80cb 	bhi.w	8000d04 <__udivmoddi4+0x2c0>
 8000b6e:	4643      	mov	r3, r8
 8000b70:	1a09      	subs	r1, r1, r0
 8000b72:	b2a4      	uxth	r4, r4
 8000b74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b78:	fb07 1110 	mls	r1, r7, r0, r1
 8000b7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b80:	fb0e fe00 	mul.w	lr, lr, r0
 8000b84:	45a6      	cmp	lr, r4
 8000b86:	d908      	bls.n	8000b9a <__udivmoddi4+0x156>
 8000b88:	eb1c 0404 	adds.w	r4, ip, r4
 8000b8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b90:	d202      	bcs.n	8000b98 <__udivmoddi4+0x154>
 8000b92:	45a6      	cmp	lr, r4
 8000b94:	f200 80bb 	bhi.w	8000d0e <__udivmoddi4+0x2ca>
 8000b98:	4608      	mov	r0, r1
 8000b9a:	eba4 040e 	sub.w	r4, r4, lr
 8000b9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ba2:	e79c      	b.n	8000ade <__udivmoddi4+0x9a>
 8000ba4:	f1c6 0720 	rsb	r7, r6, #32
 8000ba8:	40b3      	lsls	r3, r6
 8000baa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bba:	431c      	orrs	r4, r3
 8000bbc:	40f9      	lsrs	r1, r7
 8000bbe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bc2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bc6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bca:	0c20      	lsrs	r0, r4, #16
 8000bcc:	fa1f fe8c 	uxth.w	lr, ip
 8000bd0:	fb09 1118 	mls	r1, r9, r8, r1
 8000bd4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bd8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bdc:	4288      	cmp	r0, r1
 8000bde:	fa02 f206 	lsl.w	r2, r2, r6
 8000be2:	d90b      	bls.n	8000bfc <__udivmoddi4+0x1b8>
 8000be4:	eb1c 0101 	adds.w	r1, ip, r1
 8000be8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bec:	f080 8088 	bcs.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf0:	4288      	cmp	r0, r1
 8000bf2:	f240 8085 	bls.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bfa:	4461      	add	r1, ip
 8000bfc:	1a09      	subs	r1, r1, r0
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c04:	fb09 1110 	mls	r1, r9, r0, r1
 8000c08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c10:	458e      	cmp	lr, r1
 8000c12:	d908      	bls.n	8000c26 <__udivmoddi4+0x1e2>
 8000c14:	eb1c 0101 	adds.w	r1, ip, r1
 8000c18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c1c:	d26c      	bcs.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c1e:	458e      	cmp	lr, r1
 8000c20:	d96a      	bls.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c22:	3802      	subs	r0, #2
 8000c24:	4461      	add	r1, ip
 8000c26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c2e:	eba1 010e 	sub.w	r1, r1, lr
 8000c32:	42a1      	cmp	r1, r4
 8000c34:	46c8      	mov	r8, r9
 8000c36:	46a6      	mov	lr, r4
 8000c38:	d356      	bcc.n	8000ce8 <__udivmoddi4+0x2a4>
 8000c3a:	d053      	beq.n	8000ce4 <__udivmoddi4+0x2a0>
 8000c3c:	b15d      	cbz	r5, 8000c56 <__udivmoddi4+0x212>
 8000c3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c42:	eb61 010e 	sbc.w	r1, r1, lr
 8000c46:	fa01 f707 	lsl.w	r7, r1, r7
 8000c4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c4e:	40f1      	lsrs	r1, r6
 8000c50:	431f      	orrs	r7, r3
 8000c52:	e9c5 7100 	strd	r7, r1, [r5]
 8000c56:	2600      	movs	r6, #0
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	f1c2 0320 	rsb	r3, r2, #32
 8000c62:	40d8      	lsrs	r0, r3
 8000c64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c68:	fa21 f303 	lsr.w	r3, r1, r3
 8000c6c:	4091      	lsls	r1, r2
 8000c6e:	4301      	orrs	r1, r0
 8000c70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c74:	fa1f fe8c 	uxth.w	lr, ip
 8000c78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c80:	0c0b      	lsrs	r3, r1, #16
 8000c82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c86:	fb00 f60e 	mul.w	r6, r0, lr
 8000c8a:	429e      	cmp	r6, r3
 8000c8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x260>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c9a:	d22f      	bcs.n	8000cfc <__udivmoddi4+0x2b8>
 8000c9c:	429e      	cmp	r6, r3
 8000c9e:	d92d      	bls.n	8000cfc <__udivmoddi4+0x2b8>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	1b9b      	subs	r3, r3, r6
 8000ca6:	b289      	uxth	r1, r1
 8000ca8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cac:	fb07 3316 	mls	r3, r7, r6, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x28a>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cc4:	d216      	bcs.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d914      	bls.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cca:	3e02      	subs	r6, #2
 8000ccc:	4461      	add	r1, ip
 8000cce:	1ac9      	subs	r1, r1, r3
 8000cd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cd4:	e738      	b.n	8000b48 <__udivmoddi4+0x104>
 8000cd6:	462e      	mov	r6, r5
 8000cd8:	4628      	mov	r0, r5
 8000cda:	e705      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000cdc:	4606      	mov	r6, r0
 8000cde:	e6e3      	b.n	8000aa8 <__udivmoddi4+0x64>
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	e6f8      	b.n	8000ad6 <__udivmoddi4+0x92>
 8000ce4:	454b      	cmp	r3, r9
 8000ce6:	d2a9      	bcs.n	8000c3c <__udivmoddi4+0x1f8>
 8000ce8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cf0:	3801      	subs	r0, #1
 8000cf2:	e7a3      	b.n	8000c3c <__udivmoddi4+0x1f8>
 8000cf4:	4646      	mov	r6, r8
 8000cf6:	e7ea      	b.n	8000cce <__udivmoddi4+0x28a>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	e794      	b.n	8000c26 <__udivmoddi4+0x1e2>
 8000cfc:	4640      	mov	r0, r8
 8000cfe:	e7d1      	b.n	8000ca4 <__udivmoddi4+0x260>
 8000d00:	46d0      	mov	r8, sl
 8000d02:	e77b      	b.n	8000bfc <__udivmoddi4+0x1b8>
 8000d04:	3b02      	subs	r3, #2
 8000d06:	4461      	add	r1, ip
 8000d08:	e732      	b.n	8000b70 <__udivmoddi4+0x12c>
 8000d0a:	4630      	mov	r0, r6
 8000d0c:	e709      	b.n	8000b22 <__udivmoddi4+0xde>
 8000d0e:	4464      	add	r4, ip
 8000d10:	3802      	subs	r0, #2
 8000d12:	e742      	b.n	8000b9a <__udivmoddi4+0x156>

08000d14 <__aeabi_idiv0>:
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop

08000d18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d1c:	f000 fdac 	bl	8001878 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d20:	f000 f8ee 	bl	8000f00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d24:	f000 fac8 	bl	80012b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d28:	f000 fa90 	bl	800124c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000d2c:	f000 fa64 	bl	80011f8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000d30:	f000 f950 	bl	8000fd4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000d34:	f000 f9f0 	bl	8001118 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000d38:	4863      	ldr	r0, [pc, #396]	; (8000ec8 <main+0x1b0>)
 8000d3a:	f002 f917 	bl	8002f6c <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, InputCaptureBuffer, IC_BUFFER_SIZE);
 8000d3e:	2314      	movs	r3, #20
 8000d40:	4a62      	ldr	r2, [pc, #392]	; (8000ecc <main+0x1b4>)
 8000d42:	2100      	movs	r1, #0
 8000d44:	4860      	ldr	r0, [pc, #384]	; (8000ec8 <main+0x1b0>)
 8000d46:	f002 facf 	bl	80032e8 <HAL_TIM_IC_Start_DMA>

  HAL_TIM_Base_Start(&htim1);
 8000d4a:	4861      	ldr	r0, [pc, #388]	; (8000ed0 <main+0x1b8>)
 8000d4c:	f002 f90e 	bl	8002f6c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d50:	2100      	movs	r1, #0
 8000d52:	485f      	ldr	r0, [pc, #380]	; (8000ed0 <main+0x1b8>)
 8000d54:	f002 f9be 	bl	80030d4 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  static uint32_t timestamp = 0;
		 	  if(HAL_GetTick()>= timestamp)
 8000d58:	f000 fdf4 	bl	8001944 <HAL_GetTick>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	4b5d      	ldr	r3, [pc, #372]	; (8000ed4 <main+0x1bc>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d3f8      	bcc.n	8000d58 <main+0x40>
		 	  {
		 		  timestamp = HAL_GetTick()+ 500;
 8000d66:	f000 fded 	bl	8001944 <HAL_GetTick>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000d70:	4a58      	ldr	r2, [pc, #352]	; (8000ed4 <main+0x1bc>)
 8000d72:	6013      	str	r3, [r2, #0]
		 		  averageRisingedgePeriod = IC_Cale_Period();
 8000d74:	f000 fb0e 	bl	8001394 <IC_Cale_Period>
 8000d78:	eef0 7a40 	vmov.f32	s15, s0
 8000d7c:	4b56      	ldr	r3, [pc, #344]	; (8000ed8 <main+0x1c0>)
 8000d7e:	edc3 7a00 	vstr	s15, [r3]
		 		 MotorReadRPM = (60/(averageRisingedgePeriod*12*0.000001*64));
 8000d82:	4b55      	ldr	r3, [pc, #340]	; (8000ed8 <main+0x1c0>)
 8000d84:	edd3 7a00 	vldr	s15, [r3]
 8000d88:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8000d8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d90:	ee17 0a90 	vmov	r0, s15
 8000d94:	f7ff fb84 	bl	80004a0 <__aeabi_f2d>
 8000d98:	a349      	add	r3, pc, #292	; (adr r3, 8000ec0 <main+0x1a8>)
 8000d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d9e:	f7ff fbd7 	bl	8000550 <__aeabi_dmul>
 8000da2:	4602      	mov	r2, r0
 8000da4:	460b      	mov	r3, r1
 8000da6:	4610      	mov	r0, r2
 8000da8:	4619      	mov	r1, r3
 8000daa:	f04f 0200 	mov.w	r2, #0
 8000dae:	4b4b      	ldr	r3, [pc, #300]	; (8000edc <main+0x1c4>)
 8000db0:	f7ff fbce 	bl	8000550 <__aeabi_dmul>
 8000db4:	4602      	mov	r2, r0
 8000db6:	460b      	mov	r3, r1
 8000db8:	f04f 0000 	mov.w	r0, #0
 8000dbc:	4948      	ldr	r1, [pc, #288]	; (8000ee0 <main+0x1c8>)
 8000dbe:	f7ff fcf1 	bl	80007a4 <__aeabi_ddiv>
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	4610      	mov	r0, r2
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f7ff fdd3 	bl	8000974 <__aeabi_d2f>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	4a44      	ldr	r2, [pc, #272]	; (8000ee4 <main+0x1cc>)
 8000dd2:	6013      	str	r3, [r2, #0]

					  if(MotorControlEnabel == 0)
 8000dd4:	4b44      	ldr	r3, [pc, #272]	; (8000ee8 <main+0x1d0>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d112      	bne.n	8000e02 <main+0xea>
					  {
						  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,(duty*10));
 8000ddc:	4b43      	ldr	r3, [pc, #268]	; (8000eec <main+0x1d4>)
 8000dde:	edd3 7a00 	vldr	s15, [r3]
 8000de2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000de6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dea:	4b39      	ldr	r3, [pc, #228]	; (8000ed0 <main+0x1b8>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000df2:	ee17 2a90 	vmov	r2, s15
 8000df6:	635a      	str	r2, [r3, #52]	; 0x34

						  duty = MotorSetDuty;
 8000df8:	4b3d      	ldr	r3, [pc, #244]	; (8000ef0 <main+0x1d8>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a3b      	ldr	r2, [pc, #236]	; (8000eec <main+0x1d4>)
 8000dfe:	6013      	str	r3, [r2, #0]
 8000e00:	e7aa      	b.n	8000d58 <main+0x40>
					  }
					  else if(MotorControlEnabel == 1){
 8000e02:	4b39      	ldr	r3, [pc, #228]	; (8000ee8 <main+0x1d0>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d1a6      	bne.n	8000d58 <main+0x40>
						  if(MotorSetRPM > MotorReadRPM){
 8000e0a:	4b3a      	ldr	r3, [pc, #232]	; (8000ef4 <main+0x1dc>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	ee07 3a90 	vmov	s15, r3
 8000e12:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e16:	4b33      	ldr	r3, [pc, #204]	; (8000ee4 <main+0x1cc>)
 8000e18:	edd3 7a00 	vldr	s15, [r3]
 8000e1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e24:	dd0a      	ble.n	8000e3c <main+0x124>
							  duty += 1;
 8000e26:	4b31      	ldr	r3, [pc, #196]	; (8000eec <main+0x1d4>)
 8000e28:	edd3 7a00 	vldr	s15, [r3]
 8000e2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000e30:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e34:	4b2d      	ldr	r3, [pc, #180]	; (8000eec <main+0x1d4>)
 8000e36:	edc3 7a00 	vstr	s15, [r3]
 8000e3a:	e017      	b.n	8000e6c <main+0x154>
						  }
						  else if(MotorSetRPM < MotorReadRPM)
 8000e3c:	4b2d      	ldr	r3, [pc, #180]	; (8000ef4 <main+0x1dc>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	ee07 3a90 	vmov	s15, r3
 8000e44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e48:	4b26      	ldr	r3, [pc, #152]	; (8000ee4 <main+0x1cc>)
 8000e4a:	edd3 7a00 	vldr	s15, [r3]
 8000e4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e56:	d509      	bpl.n	8000e6c <main+0x154>
						  {
							  duty -= 1;
 8000e58:	4b24      	ldr	r3, [pc, #144]	; (8000eec <main+0x1d4>)
 8000e5a:	edd3 7a00 	vldr	s15, [r3]
 8000e5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000e62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e66:	4b21      	ldr	r3, [pc, #132]	; (8000eec <main+0x1d4>)
 8000e68:	edc3 7a00 	vstr	s15, [r3]
						  }
						  if(duty >= 100)
 8000e6c:	4b1f      	ldr	r3, [pc, #124]	; (8000eec <main+0x1d4>)
 8000e6e:	edd3 7a00 	vldr	s15, [r3]
 8000e72:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8000ef8 <main+0x1e0>
 8000e76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e7e:	db03      	blt.n	8000e88 <main+0x170>
						  {
							  duty = 100;
 8000e80:	4b1a      	ldr	r3, [pc, #104]	; (8000eec <main+0x1d4>)
 8000e82:	4a1e      	ldr	r2, [pc, #120]	; (8000efc <main+0x1e4>)
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	e00b      	b.n	8000ea0 <main+0x188>
						  }
						  else if(duty <= 0)
 8000e88:	4b18      	ldr	r3, [pc, #96]	; (8000eec <main+0x1d4>)
 8000e8a:	edd3 7a00 	vldr	s15, [r3]
 8000e8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e96:	d803      	bhi.n	8000ea0 <main+0x188>
						  {
							  duty = 0;
 8000e98:	4b14      	ldr	r3, [pc, #80]	; (8000eec <main+0x1d4>)
 8000e9a:	f04f 0200 	mov.w	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
						  }
						 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,(duty*10));
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <main+0x1d4>)
 8000ea2:	edd3 7a00 	vldr	s15, [r3]
 8000ea6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000eaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000eae:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <main+0x1b8>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000eb6:	ee17 2a90 	vmov	r2, s15
 8000eba:	635a      	str	r2, [r3, #52]	; 0x34
  {
 8000ebc:	e74c      	b.n	8000d58 <main+0x40>
 8000ebe:	bf00      	nop
 8000ec0:	a0b5ed8d 	.word	0xa0b5ed8d
 8000ec4:	3eb0c6f7 	.word	0x3eb0c6f7
 8000ec8:	20000078 	.word	0x20000078
 8000ecc:	200001c4 	.word	0x200001c4
 8000ed0:	20000030 	.word	0x20000030
 8000ed4:	20000224 	.word	0x20000224
 8000ed8:	20000214 	.word	0x20000214
 8000edc:	40500000 	.word	0x40500000
 8000ee0:	404e0000 	.word	0x404e0000
 8000ee4:	20000218 	.word	0x20000218
 8000ee8:	20000220 	.word	0x20000220
 8000eec:	20000000 	.word	0x20000000
 8000ef0:	2000021c 	.word	0x2000021c
 8000ef4:	20000004 	.word	0x20000004
 8000ef8:	42c80000 	.word	0x42c80000
 8000efc:	42c80000 	.word	0x42c80000

08000f00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b094      	sub	sp, #80	; 0x50
 8000f04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f06:	f107 0320 	add.w	r3, r7, #32
 8000f0a:	2230      	movs	r2, #48	; 0x30
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f003 ff7e 	bl	8004e10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f14:	f107 030c 	add.w	r3, r7, #12
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f24:	2300      	movs	r3, #0
 8000f26:	60bb      	str	r3, [r7, #8]
 8000f28:	4b28      	ldr	r3, [pc, #160]	; (8000fcc <SystemClock_Config+0xcc>)
 8000f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2c:	4a27      	ldr	r2, [pc, #156]	; (8000fcc <SystemClock_Config+0xcc>)
 8000f2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f32:	6413      	str	r3, [r2, #64]	; 0x40
 8000f34:	4b25      	ldr	r3, [pc, #148]	; (8000fcc <SystemClock_Config+0xcc>)
 8000f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f40:	2300      	movs	r3, #0
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	4b22      	ldr	r3, [pc, #136]	; (8000fd0 <SystemClock_Config+0xd0>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a21      	ldr	r2, [pc, #132]	; (8000fd0 <SystemClock_Config+0xd0>)
 8000f4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f4e:	6013      	str	r3, [r2, #0]
 8000f50:	4b1f      	ldr	r3, [pc, #124]	; (8000fd0 <SystemClock_Config+0xd0>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f58:	607b      	str	r3, [r7, #4]
 8000f5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f60:	2301      	movs	r3, #1
 8000f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f64:	2310      	movs	r3, #16
 8000f66:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f70:	2310      	movs	r3, #16
 8000f72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f74:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f78:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f7a:	2304      	movs	r3, #4
 8000f7c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f7e:	2304      	movs	r3, #4
 8000f80:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f82:	f107 0320 	add.w	r3, r7, #32
 8000f86:	4618      	mov	r0, r3
 8000f88:	f001 fb08 	bl	800259c <HAL_RCC_OscConfig>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f92:	f000 fa6f 	bl	8001474 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f96:	230f      	movs	r3, #15
 8000f98:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fa6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fac:	f107 030c 	add.w	r3, r7, #12
 8000fb0:	2102      	movs	r1, #2
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f001 fd6a 	bl	8002a8c <HAL_RCC_ClockConfig>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000fbe:	f000 fa59 	bl	8001474 <Error_Handler>
  }
}
 8000fc2:	bf00      	nop
 8000fc4:	3750      	adds	r7, #80	; 0x50
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40007000 	.word	0x40007000

08000fd4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b096      	sub	sp, #88	; 0x58
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fda:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]
 8001000:	611a      	str	r2, [r3, #16]
 8001002:	615a      	str	r2, [r3, #20]
 8001004:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001006:	1d3b      	adds	r3, r7, #4
 8001008:	2220      	movs	r2, #32
 800100a:	2100      	movs	r1, #0
 800100c:	4618      	mov	r0, r3
 800100e:	f003 feff 	bl	8004e10 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001012:	4b3f      	ldr	r3, [pc, #252]	; (8001110 <MX_TIM1_Init+0x13c>)
 8001014:	4a3f      	ldr	r2, [pc, #252]	; (8001114 <MX_TIM1_Init+0x140>)
 8001016:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8001018:	4b3d      	ldr	r3, [pc, #244]	; (8001110 <MX_TIM1_Init+0x13c>)
 800101a:	2253      	movs	r2, #83	; 0x53
 800101c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800101e:	4b3c      	ldr	r3, [pc, #240]	; (8001110 <MX_TIM1_Init+0x13c>)
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001024:	4b3a      	ldr	r3, [pc, #232]	; (8001110 <MX_TIM1_Init+0x13c>)
 8001026:	f240 32e7 	movw	r2, #999	; 0x3e7
 800102a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800102c:	4b38      	ldr	r3, [pc, #224]	; (8001110 <MX_TIM1_Init+0x13c>)
 800102e:	2200      	movs	r2, #0
 8001030:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001032:	4b37      	ldr	r3, [pc, #220]	; (8001110 <MX_TIM1_Init+0x13c>)
 8001034:	2200      	movs	r2, #0
 8001036:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001038:	4b35      	ldr	r3, [pc, #212]	; (8001110 <MX_TIM1_Init+0x13c>)
 800103a:	2200      	movs	r2, #0
 800103c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800103e:	4834      	ldr	r0, [pc, #208]	; (8001110 <MX_TIM1_Init+0x13c>)
 8001040:	f001 ff44 	bl	8002ecc <HAL_TIM_Base_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800104a:	f000 fa13 	bl	8001474 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800104e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001052:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001054:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001058:	4619      	mov	r1, r3
 800105a:	482d      	ldr	r0, [pc, #180]	; (8001110 <MX_TIM1_Init+0x13c>)
 800105c:	f002 fd46 	bl	8003aec <HAL_TIM_ConfigClockSource>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001066:	f000 fa05 	bl	8001474 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800106a:	4829      	ldr	r0, [pc, #164]	; (8001110 <MX_TIM1_Init+0x13c>)
 800106c:	f001 ffd8 	bl	8003020 <HAL_TIM_PWM_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001076:	f000 f9fd 	bl	8001474 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800107a:	2300      	movs	r3, #0
 800107c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800107e:	2300      	movs	r3, #0
 8001080:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001082:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001086:	4619      	mov	r1, r3
 8001088:	4821      	ldr	r0, [pc, #132]	; (8001110 <MX_TIM1_Init+0x13c>)
 800108a:	f003 fb07 	bl	800469c <HAL_TIMEx_MasterConfigSynchronization>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001094:	f000 f9ee 	bl	8001474 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001098:	2360      	movs	r3, #96	; 0x60
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500;
 800109c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010a2:	2300      	movs	r3, #0
 80010a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010a6:	2300      	movs	r3, #0
 80010a8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010aa:	2300      	movs	r3, #0
 80010ac:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010ae:	2300      	movs	r3, #0
 80010b0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010b2:	2300      	movs	r3, #0
 80010b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ba:	2200      	movs	r2, #0
 80010bc:	4619      	mov	r1, r3
 80010be:	4814      	ldr	r0, [pc, #80]	; (8001110 <MX_TIM1_Init+0x13c>)
 80010c0:	f002 fc52 	bl	8003968 <HAL_TIM_PWM_ConfigChannel>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80010ca:	f000 f9d3 	bl	8001474 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010ce:	2300      	movs	r3, #0
 80010d0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010d2:	2300      	movs	r3, #0
 80010d4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010e6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010e8:	2300      	movs	r3, #0
 80010ea:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	4619      	mov	r1, r3
 80010f0:	4807      	ldr	r0, [pc, #28]	; (8001110 <MX_TIM1_Init+0x13c>)
 80010f2:	f003 fb41 	bl	8004778 <HAL_TIMEx_ConfigBreakDeadTime>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80010fc:	f000 f9ba 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001100:	4803      	ldr	r0, [pc, #12]	; (8001110 <MX_TIM1_Init+0x13c>)
 8001102:	f000 fab3 	bl	800166c <HAL_TIM_MspPostInit>

}
 8001106:	bf00      	nop
 8001108:	3758      	adds	r7, #88	; 0x58
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000030 	.word	0x20000030
 8001114:	40010000 	.word	0x40010000

08001118 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08a      	sub	sp, #40	; 0x28
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800111e:	f107 0318 	add.w	r3, r7, #24
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800112c:	f107 0310 	add.w	r3, r7, #16
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001136:	463b      	mov	r3, r7
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001142:	4b2c      	ldr	r3, [pc, #176]	; (80011f4 <MX_TIM2_Init+0xdc>)
 8001144:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001148:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 800114a:	4b2a      	ldr	r3, [pc, #168]	; (80011f4 <MX_TIM2_Init+0xdc>)
 800114c:	2253      	movs	r2, #83	; 0x53
 800114e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001150:	4b28      	ldr	r3, [pc, #160]	; (80011f4 <MX_TIM2_Init+0xdc>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001156:	4b27      	ldr	r3, [pc, #156]	; (80011f4 <MX_TIM2_Init+0xdc>)
 8001158:	f04f 32ff 	mov.w	r2, #4294967295
 800115c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800115e:	4b25      	ldr	r3, [pc, #148]	; (80011f4 <MX_TIM2_Init+0xdc>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001164:	4b23      	ldr	r3, [pc, #140]	; (80011f4 <MX_TIM2_Init+0xdc>)
 8001166:	2200      	movs	r2, #0
 8001168:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800116a:	4822      	ldr	r0, [pc, #136]	; (80011f4 <MX_TIM2_Init+0xdc>)
 800116c:	f001 feae 	bl	8002ecc <HAL_TIM_Base_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001176:	f000 f97d 	bl	8001474 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800117a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800117e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001180:	f107 0318 	add.w	r3, r7, #24
 8001184:	4619      	mov	r1, r3
 8001186:	481b      	ldr	r0, [pc, #108]	; (80011f4 <MX_TIM2_Init+0xdc>)
 8001188:	f002 fcb0 	bl	8003aec <HAL_TIM_ConfigClockSource>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001192:	f000 f96f 	bl	8001474 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001196:	4817      	ldr	r0, [pc, #92]	; (80011f4 <MX_TIM2_Init+0xdc>)
 8001198:	f002 f84c 	bl	8003234 <HAL_TIM_IC_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80011a2:	f000 f967 	bl	8001474 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011ae:	f107 0310 	add.w	r3, r7, #16
 80011b2:	4619      	mov	r1, r3
 80011b4:	480f      	ldr	r0, [pc, #60]	; (80011f4 <MX_TIM2_Init+0xdc>)
 80011b6:	f003 fa71 	bl	800469c <HAL_TIMEx_MasterConfigSynchronization>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80011c0:	f000 f958 	bl	8001474 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011c4:	2300      	movs	r3, #0
 80011c6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011c8:	2301      	movs	r3, #1
 80011ca:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80011cc:	2300      	movs	r3, #0
 80011ce:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80011d4:	463b      	mov	r3, r7
 80011d6:	2200      	movs	r2, #0
 80011d8:	4619      	mov	r1, r3
 80011da:	4806      	ldr	r0, [pc, #24]	; (80011f4 <MX_TIM2_Init+0xdc>)
 80011dc:	f002 fb28 	bl	8003830 <HAL_TIM_IC_ConfigChannel>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80011e6:	f000 f945 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011ea:	bf00      	nop
 80011ec:	3728      	adds	r7, #40	; 0x28
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000078 	.word	0x20000078

080011f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <MX_USART2_UART_Init+0x4c>)
 80011fe:	4a12      	ldr	r2, [pc, #72]	; (8001248 <MX_USART2_UART_Init+0x50>)
 8001200:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <MX_USART2_UART_Init+0x4c>)
 8001204:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001208:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <MX_USART2_UART_Init+0x4c>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <MX_USART2_UART_Init+0x4c>)
 8001212:	2200      	movs	r2, #0
 8001214:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001216:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <MX_USART2_UART_Init+0x4c>)
 8001218:	2200      	movs	r2, #0
 800121a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800121c:	4b09      	ldr	r3, [pc, #36]	; (8001244 <MX_USART2_UART_Init+0x4c>)
 800121e:	220c      	movs	r2, #12
 8001220:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001222:	4b08      	ldr	r3, [pc, #32]	; (8001244 <MX_USART2_UART_Init+0x4c>)
 8001224:	2200      	movs	r2, #0
 8001226:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <MX_USART2_UART_Init+0x4c>)
 800122a:	2200      	movs	r2, #0
 800122c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800122e:	4805      	ldr	r0, [pc, #20]	; (8001244 <MX_USART2_UART_Init+0x4c>)
 8001230:	f003 fb08 	bl	8004844 <HAL_UART_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800123a:	f000 f91b 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000180 	.word	0x20000180
 8001248:	40004400 	.word	0x40004400

0800124c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <MX_DMA_Init+0x68>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4a16      	ldr	r2, [pc, #88]	; (80012b4 <MX_DMA_Init+0x68>)
 800125c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
 8001262:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <MX_DMA_Init+0x68>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	603b      	str	r3, [r7, #0]
 8001272:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <MX_DMA_Init+0x68>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a0f      	ldr	r2, [pc, #60]	; (80012b4 <MX_DMA_Init+0x68>)
 8001278:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <MX_DMA_Init+0x68>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001286:	603b      	str	r3, [r7, #0]
 8001288:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800128a:	2200      	movs	r2, #0
 800128c:	2100      	movs	r1, #0
 800128e:	2010      	movs	r0, #16
 8001290:	f000 fc3f 	bl	8001b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001294:	2010      	movs	r0, #16
 8001296:	f000 fc58 	bl	8001b4a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800129a:	2200      	movs	r2, #0
 800129c:	2100      	movs	r1, #0
 800129e:	2039      	movs	r0, #57	; 0x39
 80012a0:	f000 fc37 	bl	8001b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80012a4:	2039      	movs	r0, #57	; 0x39
 80012a6:	f000 fc50 	bl	8001b4a <HAL_NVIC_EnableIRQ>

}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40023800 	.word	0x40023800

080012b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08a      	sub	sp, #40	; 0x28
 80012bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]
 80012cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
 80012d2:	4b2d      	ldr	r3, [pc, #180]	; (8001388 <MX_GPIO_Init+0xd0>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a2c      	ldr	r2, [pc, #176]	; (8001388 <MX_GPIO_Init+0xd0>)
 80012d8:	f043 0304 	orr.w	r3, r3, #4
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b2a      	ldr	r3, [pc, #168]	; (8001388 <MX_GPIO_Init+0xd0>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0304 	and.w	r3, r3, #4
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	4b26      	ldr	r3, [pc, #152]	; (8001388 <MX_GPIO_Init+0xd0>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a25      	ldr	r2, [pc, #148]	; (8001388 <MX_GPIO_Init+0xd0>)
 80012f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b23      	ldr	r3, [pc, #140]	; (8001388 <MX_GPIO_Init+0xd0>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	4b1f      	ldr	r3, [pc, #124]	; (8001388 <MX_GPIO_Init+0xd0>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	4a1e      	ldr	r2, [pc, #120]	; (8001388 <MX_GPIO_Init+0xd0>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	6313      	str	r3, [r2, #48]	; 0x30
 8001316:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <MX_GPIO_Init+0xd0>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	607b      	str	r3, [r7, #4]
 8001326:	4b18      	ldr	r3, [pc, #96]	; (8001388 <MX_GPIO_Init+0xd0>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	4a17      	ldr	r2, [pc, #92]	; (8001388 <MX_GPIO_Init+0xd0>)
 800132c:	f043 0302 	orr.w	r3, r3, #2
 8001330:	6313      	str	r3, [r2, #48]	; 0x30
 8001332:	4b15      	ldr	r3, [pc, #84]	; (8001388 <MX_GPIO_Init+0xd0>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800133e:	2200      	movs	r2, #0
 8001340:	2120      	movs	r1, #32
 8001342:	4812      	ldr	r0, [pc, #72]	; (800138c <MX_GPIO_Init+0xd4>)
 8001344:	f001 f910 	bl	8002568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001348:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800134c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800134e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001352:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	4619      	mov	r1, r3
 800135e:	480c      	ldr	r0, [pc, #48]	; (8001390 <MX_GPIO_Init+0xd8>)
 8001360:	f000 ff7e 	bl	8002260 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001364:	2320      	movs	r3, #32
 8001366:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001368:	2301      	movs	r3, #1
 800136a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001370:	2300      	movs	r3, #0
 8001372:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	4619      	mov	r1, r3
 800137a:	4804      	ldr	r0, [pc, #16]	; (800138c <MX_GPIO_Init+0xd4>)
 800137c:	f000 ff70 	bl	8002260 <HAL_GPIO_Init>

}
 8001380:	bf00      	nop
 8001382:	3728      	adds	r7, #40	; 0x28
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40023800 	.word	0x40023800
 800138c:	40020000 	.word	0x40020000
 8001390:	40020800 	.word	0x40020800

08001394 <IC_Cale_Period>:

/* USER CODE BEGIN 4 */
float IC_Cale_Period()
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
	uint32_t currentDMAPointter = IC_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(htim2.hdma[1]);
 800139a:	4b32      	ldr	r3, [pc, #200]	; (8001464 <IC_Cale_Period+0xd0>)
 800139c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f1c3 0314 	rsb	r3, r3, #20
 80013a6:	60fb      	str	r3, [r7, #12]
	uint32_t lastVaildDMAPointer = (currentDMAPointter-1 + IC_BUFFER_SIZE) % IC_BUFFER_SIZE;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	f103 0213 	add.w	r2, r3, #19
 80013ae:	4b2e      	ldr	r3, [pc, #184]	; (8001468 <IC_Cale_Period+0xd4>)
 80013b0:	fba3 1302 	umull	r1, r3, r3, r2
 80013b4:	0919      	lsrs	r1, r3, #4
 80013b6:	460b      	mov	r3, r1
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	440b      	add	r3, r1
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	60bb      	str	r3, [r7, #8]
	uint32_t i = (lastVaildDMAPointer + IC_BUFFER_SIZE - 5) %IC_BUFFER_SIZE;
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	f103 020f 	add.w	r2, r3, #15
 80013c8:	4b27      	ldr	r3, [pc, #156]	; (8001468 <IC_Cale_Period+0xd4>)
 80013ca:	fba3 1302 	umull	r1, r3, r3, r2
 80013ce:	0919      	lsrs	r1, r3, #4
 80013d0:	460b      	mov	r3, r1
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	440b      	add	r3, r1
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	617b      	str	r3, [r7, #20]

	int32_t sumdiff = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	613b      	str	r3, [r7, #16]
	while(i != lastVaildDMAPointer)
 80013e0:	e025      	b.n	800142e <IC_Cale_Period+0x9a>
	{
		uint32_t firstCapture = InputCaptureBuffer[i];
 80013e2:	4a22      	ldr	r2, [pc, #136]	; (800146c <IC_Cale_Period+0xd8>)
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ea:	607b      	str	r3, [r7, #4]
		uint32_t NextCapture = InputCaptureBuffer[(i+1)%IC_BUFFER_SIZE];
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	1c59      	adds	r1, r3, #1
 80013f0:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <IC_Cale_Period+0xd4>)
 80013f2:	fba3 2301 	umull	r2, r3, r3, r1
 80013f6:	091a      	lsrs	r2, r3, #4
 80013f8:	4613      	mov	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	1aca      	subs	r2, r1, r3
 8001402:	4b1a      	ldr	r3, [pc, #104]	; (800146c <IC_Cale_Period+0xd8>)
 8001404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001408:	603b      	str	r3, [r7, #0]
		sumdiff += NextCapture-firstCapture;
 800140a:	683a      	ldr	r2, [r7, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	1ad2      	subs	r2, r2, r3
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	4413      	add	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
		i = (i+1) % IC_BUFFER_SIZE;
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	1c5a      	adds	r2, r3, #1
 800141a:	4b13      	ldr	r3, [pc, #76]	; (8001468 <IC_Cale_Period+0xd4>)
 800141c:	fba3 1302 	umull	r1, r3, r3, r2
 8001420:	0919      	lsrs	r1, r3, #4
 8001422:	460b      	mov	r3, r1
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	440b      	add	r3, r1
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	617b      	str	r3, [r7, #20]
	while(i != lastVaildDMAPointer)
 800142e:	697a      	ldr	r2, [r7, #20]
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	429a      	cmp	r2, r3
 8001434:	d1d5      	bne.n	80013e2 <IC_Cale_Period+0x4e>
	}
	return sumdiff / 5.0;
 8001436:	6938      	ldr	r0, [r7, #16]
 8001438:	f7ff f820 	bl	800047c <__aeabi_i2d>
 800143c:	f04f 0200 	mov.w	r2, #0
 8001440:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <IC_Cale_Period+0xdc>)
 8001442:	f7ff f9af 	bl	80007a4 <__aeabi_ddiv>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4610      	mov	r0, r2
 800144c:	4619      	mov	r1, r3
 800144e:	f7ff fa91 	bl	8000974 <__aeabi_d2f>
 8001452:	4603      	mov	r3, r0
 8001454:	ee07 3a90 	vmov	s15, r3

}
 8001458:	eeb0 0a67 	vmov.f32	s0, s15
 800145c:	3718      	adds	r7, #24
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000078 	.word	0x20000078
 8001468:	cccccccd 	.word	0xcccccccd
 800146c:	200001c4 	.word	0x200001c4
 8001470:	40140000 	.word	0x40140000

08001474 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001478:	b672      	cpsid	i
}
 800147a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800147c:	e7fe      	b.n	800147c <Error_Handler+0x8>
	...

08001480 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	4b10      	ldr	r3, [pc, #64]	; (80014cc <HAL_MspInit+0x4c>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148e:	4a0f      	ldr	r2, [pc, #60]	; (80014cc <HAL_MspInit+0x4c>)
 8001490:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001494:	6453      	str	r3, [r2, #68]	; 0x44
 8001496:	4b0d      	ldr	r3, [pc, #52]	; (80014cc <HAL_MspInit+0x4c>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	603b      	str	r3, [r7, #0]
 80014a6:	4b09      	ldr	r3, [pc, #36]	; (80014cc <HAL_MspInit+0x4c>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	4a08      	ldr	r2, [pc, #32]	; (80014cc <HAL_MspInit+0x4c>)
 80014ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b0:	6413      	str	r3, [r2, #64]	; 0x40
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <HAL_MspInit+0x4c>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ba:	603b      	str	r3, [r7, #0]
 80014bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014be:	2007      	movs	r0, #7
 80014c0:	f000 fb1c 	bl	8001afc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c4:	bf00      	nop
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40023800 	.word	0x40023800

080014d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08a      	sub	sp, #40	; 0x28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a58      	ldr	r2, [pc, #352]	; (8001650 <HAL_TIM_Base_MspInit+0x180>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d13f      	bne.n	8001572 <HAL_TIM_Base_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	4b57      	ldr	r3, [pc, #348]	; (8001654 <HAL_TIM_Base_MspInit+0x184>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fa:	4a56      	ldr	r2, [pc, #344]	; (8001654 <HAL_TIM_Base_MspInit+0x184>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6453      	str	r3, [r2, #68]	; 0x44
 8001502:	4b54      	ldr	r3, [pc, #336]	; (8001654 <HAL_TIM_Base_MspInit+0x184>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	693b      	ldr	r3, [r7, #16]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 800150e:	4b52      	ldr	r3, [pc, #328]	; (8001658 <HAL_TIM_Base_MspInit+0x188>)
 8001510:	4a52      	ldr	r2, [pc, #328]	; (800165c <HAL_TIM_Base_MspInit+0x18c>)
 8001512:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8001514:	4b50      	ldr	r3, [pc, #320]	; (8001658 <HAL_TIM_Base_MspInit+0x188>)
 8001516:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800151a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800151c:	4b4e      	ldr	r3, [pc, #312]	; (8001658 <HAL_TIM_Base_MspInit+0x188>)
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001522:	4b4d      	ldr	r3, [pc, #308]	; (8001658 <HAL_TIM_Base_MspInit+0x188>)
 8001524:	2200      	movs	r2, #0
 8001526:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001528:	4b4b      	ldr	r3, [pc, #300]	; (8001658 <HAL_TIM_Base_MspInit+0x188>)
 800152a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800152e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001530:	4b49      	ldr	r3, [pc, #292]	; (8001658 <HAL_TIM_Base_MspInit+0x188>)
 8001532:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001536:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001538:	4b47      	ldr	r3, [pc, #284]	; (8001658 <HAL_TIM_Base_MspInit+0x188>)
 800153a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800153e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8001540:	4b45      	ldr	r3, [pc, #276]	; (8001658 <HAL_TIM_Base_MspInit+0x188>)
 8001542:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001546:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001548:	4b43      	ldr	r3, [pc, #268]	; (8001658 <HAL_TIM_Base_MspInit+0x188>)
 800154a:	2200      	movs	r2, #0
 800154c:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800154e:	4b42      	ldr	r3, [pc, #264]	; (8001658 <HAL_TIM_Base_MspInit+0x188>)
 8001550:	2200      	movs	r2, #0
 8001552:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001554:	4840      	ldr	r0, [pc, #256]	; (8001658 <HAL_TIM_Base_MspInit+0x188>)
 8001556:	f000 fb13 	bl	8001b80 <HAL_DMA_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <HAL_TIM_Base_MspInit+0x94>
    {
      Error_Handler();
 8001560:	f7ff ff88 	bl	8001474 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4a3c      	ldr	r2, [pc, #240]	; (8001658 <HAL_TIM_Base_MspInit+0x188>)
 8001568:	625a      	str	r2, [r3, #36]	; 0x24
 800156a:	4a3b      	ldr	r2, [pc, #236]	; (8001658 <HAL_TIM_Base_MspInit+0x188>)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001570:	e069      	b.n	8001646 <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM2)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800157a:	d164      	bne.n	8001646 <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	4b34      	ldr	r3, [pc, #208]	; (8001654 <HAL_TIM_Base_MspInit+0x184>)
 8001582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001584:	4a33      	ldr	r2, [pc, #204]	; (8001654 <HAL_TIM_Base_MspInit+0x184>)
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	6413      	str	r3, [r2, #64]	; 0x40
 800158c:	4b31      	ldr	r3, [pc, #196]	; (8001654 <HAL_TIM_Base_MspInit+0x184>)
 800158e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001598:	2300      	movs	r3, #0
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	4b2d      	ldr	r3, [pc, #180]	; (8001654 <HAL_TIM_Base_MspInit+0x184>)
 800159e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a0:	4a2c      	ldr	r2, [pc, #176]	; (8001654 <HAL_TIM_Base_MspInit+0x184>)
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	6313      	str	r3, [r2, #48]	; 0x30
 80015a8:	4b2a      	ldr	r3, [pc, #168]	; (8001654 <HAL_TIM_Base_MspInit+0x184>)
 80015aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015b4:	2301      	movs	r3, #1
 80015b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b8:	2302      	movs	r3, #2
 80015ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c0:	2300      	movs	r3, #0
 80015c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015c4:	2301      	movs	r3, #1
 80015c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	4619      	mov	r1, r3
 80015ce:	4824      	ldr	r0, [pc, #144]	; (8001660 <HAL_TIM_Base_MspInit+0x190>)
 80015d0:	f000 fe46 	bl	8002260 <HAL_GPIO_Init>
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 80015d4:	4b23      	ldr	r3, [pc, #140]	; (8001664 <HAL_TIM_Base_MspInit+0x194>)
 80015d6:	4a24      	ldr	r2, [pc, #144]	; (8001668 <HAL_TIM_Base_MspInit+0x198>)
 80015d8:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 80015da:	4b22      	ldr	r3, [pc, #136]	; (8001664 <HAL_TIM_Base_MspInit+0x194>)
 80015dc:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80015e0:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015e2:	4b20      	ldr	r3, [pc, #128]	; (8001664 <HAL_TIM_Base_MspInit+0x194>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015e8:	4b1e      	ldr	r3, [pc, #120]	; (8001664 <HAL_TIM_Base_MspInit+0x194>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80015ee:	4b1d      	ldr	r3, [pc, #116]	; (8001664 <HAL_TIM_Base_MspInit+0x194>)
 80015f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015f4:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015f6:	4b1b      	ldr	r3, [pc, #108]	; (8001664 <HAL_TIM_Base_MspInit+0x194>)
 80015f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015fc:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015fe:	4b19      	ldr	r3, [pc, #100]	; (8001664 <HAL_TIM_Base_MspInit+0x194>)
 8001600:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001604:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8001606:	4b17      	ldr	r3, [pc, #92]	; (8001664 <HAL_TIM_Base_MspInit+0x194>)
 8001608:	f44f 7280 	mov.w	r2, #256	; 0x100
 800160c:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800160e:	4b15      	ldr	r3, [pc, #84]	; (8001664 <HAL_TIM_Base_MspInit+0x194>)
 8001610:	2200      	movs	r2, #0
 8001612:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001614:	4b13      	ldr	r3, [pc, #76]	; (8001664 <HAL_TIM_Base_MspInit+0x194>)
 8001616:	2200      	movs	r2, #0
 8001618:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 800161a:	4812      	ldr	r0, [pc, #72]	; (8001664 <HAL_TIM_Base_MspInit+0x194>)
 800161c:	f000 fab0 	bl	8001b80 <HAL_DMA_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <HAL_TIM_Base_MspInit+0x15a>
      Error_Handler();
 8001626:	f7ff ff25 	bl	8001474 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a0d      	ldr	r2, [pc, #52]	; (8001664 <HAL_TIM_Base_MspInit+0x194>)
 800162e:	625a      	str	r2, [r3, #36]	; 0x24
 8001630:	4a0c      	ldr	r2, [pc, #48]	; (8001664 <HAL_TIM_Base_MspInit+0x194>)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001636:	2200      	movs	r2, #0
 8001638:	2100      	movs	r1, #0
 800163a:	201c      	movs	r0, #28
 800163c:	f000 fa69 	bl	8001b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001640:	201c      	movs	r0, #28
 8001642:	f000 fa82 	bl	8001b4a <HAL_NVIC_EnableIRQ>
}
 8001646:	bf00      	nop
 8001648:	3728      	adds	r7, #40	; 0x28
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40010000 	.word	0x40010000
 8001654:	40023800 	.word	0x40023800
 8001658:	200000c0 	.word	0x200000c0
 800165c:	40026428 	.word	0x40026428
 8001660:	40020000 	.word	0x40020000
 8001664:	20000120 	.word	0x20000120
 8001668:	40026088 	.word	0x40026088

0800166c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b088      	sub	sp, #32
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 030c 	add.w	r3, r7, #12
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a12      	ldr	r2, [pc, #72]	; (80016d4 <HAL_TIM_MspPostInit+0x68>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d11e      	bne.n	80016cc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	60bb      	str	r3, [r7, #8]
 8001692:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <HAL_TIM_MspPostInit+0x6c>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	4a10      	ldr	r2, [pc, #64]	; (80016d8 <HAL_TIM_MspPostInit+0x6c>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4b0e      	ldr	r3, [pc, #56]	; (80016d8 <HAL_TIM_MspPostInit+0x6c>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	60bb      	str	r3, [r7, #8]
 80016a8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b0:	2302      	movs	r3, #2
 80016b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016bc:	2301      	movs	r3, #1
 80016be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c0:	f107 030c 	add.w	r3, r7, #12
 80016c4:	4619      	mov	r1, r3
 80016c6:	4805      	ldr	r0, [pc, #20]	; (80016dc <HAL_TIM_MspPostInit+0x70>)
 80016c8:	f000 fdca 	bl	8002260 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80016cc:	bf00      	nop
 80016ce:	3720      	adds	r7, #32
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40010000 	.word	0x40010000
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40020000 	.word	0x40020000

080016e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08a      	sub	sp, #40	; 0x28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a19      	ldr	r2, [pc, #100]	; (8001764 <HAL_UART_MspInit+0x84>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d12b      	bne.n	800175a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	613b      	str	r3, [r7, #16]
 8001706:	4b18      	ldr	r3, [pc, #96]	; (8001768 <HAL_UART_MspInit+0x88>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	4a17      	ldr	r2, [pc, #92]	; (8001768 <HAL_UART_MspInit+0x88>)
 800170c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001710:	6413      	str	r3, [r2, #64]	; 0x40
 8001712:	4b15      	ldr	r3, [pc, #84]	; (8001768 <HAL_UART_MspInit+0x88>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171a:	613b      	str	r3, [r7, #16]
 800171c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	4b11      	ldr	r3, [pc, #68]	; (8001768 <HAL_UART_MspInit+0x88>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	4a10      	ldr	r2, [pc, #64]	; (8001768 <HAL_UART_MspInit+0x88>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	6313      	str	r3, [r2, #48]	; 0x30
 800172e:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <HAL_UART_MspInit+0x88>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800173a:	230c      	movs	r3, #12
 800173c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173e:	2302      	movs	r3, #2
 8001740:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001746:	2303      	movs	r3, #3
 8001748:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800174a:	2307      	movs	r3, #7
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174e:	f107 0314 	add.w	r3, r7, #20
 8001752:	4619      	mov	r1, r3
 8001754:	4805      	ldr	r0, [pc, #20]	; (800176c <HAL_UART_MspInit+0x8c>)
 8001756:	f000 fd83 	bl	8002260 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800175a:	bf00      	nop
 800175c:	3728      	adds	r7, #40	; 0x28
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40004400 	.word	0x40004400
 8001768:	40023800 	.word	0x40023800
 800176c:	40020000 	.word	0x40020000

08001770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001774:	e7fe      	b.n	8001774 <NMI_Handler+0x4>

08001776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800177a:	e7fe      	b.n	800177a <HardFault_Handler+0x4>

0800177c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001780:	e7fe      	b.n	8001780 <MemManage_Handler+0x4>

08001782 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001786:	e7fe      	b.n	8001786 <BusFault_Handler+0x4>

08001788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800178c:	e7fe      	b.n	800178c <UsageFault_Handler+0x4>

0800178e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017bc:	f000 f8ae 	bl	800191c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80017c8:	4802      	ldr	r0, [pc, #8]	; (80017d4 <DMA1_Stream5_IRQHandler+0x10>)
 80017ca:	f000 fadf 	bl	8001d8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000120 	.word	0x20000120

080017d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017dc:	4802      	ldr	r0, [pc, #8]	; (80017e8 <TIM2_IRQHandler+0x10>)
 80017de:	f001 ff1f 	bl	8003620 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000078 	.word	0x20000078

080017ec <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80017f0:	4802      	ldr	r0, [pc, #8]	; (80017fc <DMA2_Stream1_IRQHandler+0x10>)
 80017f2:	f000 facb 	bl	8001d8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	200000c0 	.word	0x200000c0

08001800 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <SystemInit+0x20>)
 8001806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800180a:	4a05      	ldr	r2, [pc, #20]	; (8001820 <SystemInit+0x20>)
 800180c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001810:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001824:	f8df d034 	ldr.w	sp, [pc, #52]	; 800185c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001828:	480d      	ldr	r0, [pc, #52]	; (8001860 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800182a:	490e      	ldr	r1, [pc, #56]	; (8001864 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800182c:	4a0e      	ldr	r2, [pc, #56]	; (8001868 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800182e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001830:	e002      	b.n	8001838 <LoopCopyDataInit>

08001832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001836:	3304      	adds	r3, #4

08001838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800183a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800183c:	d3f9      	bcc.n	8001832 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800183e:	4a0b      	ldr	r2, [pc, #44]	; (800186c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001840:	4c0b      	ldr	r4, [pc, #44]	; (8001870 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001844:	e001      	b.n	800184a <LoopFillZerobss>

08001846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001848:	3204      	adds	r2, #4

0800184a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800184a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800184c:	d3fb      	bcc.n	8001846 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800184e:	f7ff ffd7 	bl	8001800 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001852:	f003 fab9 	bl	8004dc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001856:	f7ff fa5f 	bl	8000d18 <main>
  bx  lr    
 800185a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800185c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001864:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001868:	08004e68 	.word	0x08004e68
  ldr r2, =_sbss
 800186c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001870:	2000022c 	.word	0x2000022c

08001874 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001874:	e7fe      	b.n	8001874 <ADC_IRQHandler>
	...

08001878 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800187c:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <HAL_Init+0x40>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a0d      	ldr	r2, [pc, #52]	; (80018b8 <HAL_Init+0x40>)
 8001882:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001886:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001888:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <HAL_Init+0x40>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a0a      	ldr	r2, [pc, #40]	; (80018b8 <HAL_Init+0x40>)
 800188e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001892:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <HAL_Init+0x40>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a07      	ldr	r2, [pc, #28]	; (80018b8 <HAL_Init+0x40>)
 800189a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a0:	2003      	movs	r0, #3
 80018a2:	f000 f92b 	bl	8001afc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018a6:	2000      	movs	r0, #0
 80018a8:	f000 f808 	bl	80018bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018ac:	f7ff fde8 	bl	8001480 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40023c00 	.word	0x40023c00

080018bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018c4:	4b12      	ldr	r3, [pc, #72]	; (8001910 <HAL_InitTick+0x54>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	4b12      	ldr	r3, [pc, #72]	; (8001914 <HAL_InitTick+0x58>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	4619      	mov	r1, r3
 80018ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 f943 	bl	8001b66 <HAL_SYSTICK_Config>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e00e      	b.n	8001908 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b0f      	cmp	r3, #15
 80018ee:	d80a      	bhi.n	8001906 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018f0:	2200      	movs	r2, #0
 80018f2:	6879      	ldr	r1, [r7, #4]
 80018f4:	f04f 30ff 	mov.w	r0, #4294967295
 80018f8:	f000 f90b 	bl	8001b12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018fc:	4a06      	ldr	r2, [pc, #24]	; (8001918 <HAL_InitTick+0x5c>)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001902:	2300      	movs	r3, #0
 8001904:	e000      	b.n	8001908 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
}
 8001908:	4618      	mov	r0, r3
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000008 	.word	0x20000008
 8001914:	20000010 	.word	0x20000010
 8001918:	2000000c 	.word	0x2000000c

0800191c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <HAL_IncTick+0x20>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	461a      	mov	r2, r3
 8001926:	4b06      	ldr	r3, [pc, #24]	; (8001940 <HAL_IncTick+0x24>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4413      	add	r3, r2
 800192c:	4a04      	ldr	r2, [pc, #16]	; (8001940 <HAL_IncTick+0x24>)
 800192e:	6013      	str	r3, [r2, #0]
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	20000010 	.word	0x20000010
 8001940:	20000228 	.word	0x20000228

08001944 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  return uwTick;
 8001948:	4b03      	ldr	r3, [pc, #12]	; (8001958 <HAL_GetTick+0x14>)
 800194a:	681b      	ldr	r3, [r3, #0]
}
 800194c:	4618      	mov	r0, r3
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	20000228 	.word	0x20000228

0800195c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800196c:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <__NVIC_SetPriorityGrouping+0x44>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001972:	68ba      	ldr	r2, [r7, #8]
 8001974:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001978:	4013      	ands	r3, r2
 800197a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001984:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800198c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800198e:	4a04      	ldr	r2, [pc, #16]	; (80019a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	60d3      	str	r3, [r2, #12]
}
 8001994:	bf00      	nop
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	e000ed00 	.word	0xe000ed00

080019a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a8:	4b04      	ldr	r3, [pc, #16]	; (80019bc <__NVIC_GetPriorityGrouping+0x18>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	0a1b      	lsrs	r3, r3, #8
 80019ae:	f003 0307 	and.w	r3, r3, #7
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	db0b      	blt.n	80019ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019d2:	79fb      	ldrb	r3, [r7, #7]
 80019d4:	f003 021f 	and.w	r2, r3, #31
 80019d8:	4907      	ldr	r1, [pc, #28]	; (80019f8 <__NVIC_EnableIRQ+0x38>)
 80019da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019de:	095b      	lsrs	r3, r3, #5
 80019e0:	2001      	movs	r0, #1
 80019e2:	fa00 f202 	lsl.w	r2, r0, r2
 80019e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	e000e100 	.word	0xe000e100

080019fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	6039      	str	r1, [r7, #0]
 8001a06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	db0a      	blt.n	8001a26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	490c      	ldr	r1, [pc, #48]	; (8001a48 <__NVIC_SetPriority+0x4c>)
 8001a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1a:	0112      	lsls	r2, r2, #4
 8001a1c:	b2d2      	uxtb	r2, r2
 8001a1e:	440b      	add	r3, r1
 8001a20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a24:	e00a      	b.n	8001a3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	4908      	ldr	r1, [pc, #32]	; (8001a4c <__NVIC_SetPriority+0x50>)
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	f003 030f 	and.w	r3, r3, #15
 8001a32:	3b04      	subs	r3, #4
 8001a34:	0112      	lsls	r2, r2, #4
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	440b      	add	r3, r1
 8001a3a:	761a      	strb	r2, [r3, #24]
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	e000e100 	.word	0xe000e100
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b089      	sub	sp, #36	; 0x24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	f1c3 0307 	rsb	r3, r3, #7
 8001a6a:	2b04      	cmp	r3, #4
 8001a6c:	bf28      	it	cs
 8001a6e:	2304      	movcs	r3, #4
 8001a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	3304      	adds	r3, #4
 8001a76:	2b06      	cmp	r3, #6
 8001a78:	d902      	bls.n	8001a80 <NVIC_EncodePriority+0x30>
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3b03      	subs	r3, #3
 8001a7e:	e000      	b.n	8001a82 <NVIC_EncodePriority+0x32>
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a84:	f04f 32ff 	mov.w	r2, #4294967295
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43da      	mvns	r2, r3
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	401a      	ands	r2, r3
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a98:	f04f 31ff 	mov.w	r1, #4294967295
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa2:	43d9      	mvns	r1, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa8:	4313      	orrs	r3, r2
         );
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3724      	adds	r7, #36	; 0x24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
	...

08001ab8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ac8:	d301      	bcc.n	8001ace <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aca:	2301      	movs	r3, #1
 8001acc:	e00f      	b.n	8001aee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ace:	4a0a      	ldr	r2, [pc, #40]	; (8001af8 <SysTick_Config+0x40>)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ad6:	210f      	movs	r1, #15
 8001ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8001adc:	f7ff ff8e 	bl	80019fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ae0:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <SysTick_Config+0x40>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ae6:	4b04      	ldr	r3, [pc, #16]	; (8001af8 <SysTick_Config+0x40>)
 8001ae8:	2207      	movs	r2, #7
 8001aea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	e000e010 	.word	0xe000e010

08001afc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7ff ff29 	bl	800195c <__NVIC_SetPriorityGrouping>
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b086      	sub	sp, #24
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	4603      	mov	r3, r0
 8001b1a:	60b9      	str	r1, [r7, #8]
 8001b1c:	607a      	str	r2, [r7, #4]
 8001b1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b20:	2300      	movs	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b24:	f7ff ff3e 	bl	80019a4 <__NVIC_GetPriorityGrouping>
 8001b28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	68b9      	ldr	r1, [r7, #8]
 8001b2e:	6978      	ldr	r0, [r7, #20]
 8001b30:	f7ff ff8e 	bl	8001a50 <NVIC_EncodePriority>
 8001b34:	4602      	mov	r2, r0
 8001b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b3a:	4611      	mov	r1, r2
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff ff5d 	bl	80019fc <__NVIC_SetPriority>
}
 8001b42:	bf00      	nop
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	4603      	mov	r3, r0
 8001b52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff ff31 	bl	80019c0 <__NVIC_EnableIRQ>
}
 8001b5e:	bf00      	nop
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b082      	sub	sp, #8
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7ff ffa2 	bl	8001ab8 <SysTick_Config>
 8001b74:	4603      	mov	r3, r0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
	...

08001b80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b8c:	f7ff feda 	bl	8001944 <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d101      	bne.n	8001b9c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e099      	b.n	8001cd0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f022 0201 	bic.w	r2, r2, #1
 8001bba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bbc:	e00f      	b.n	8001bde <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bbe:	f7ff fec1 	bl	8001944 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b05      	cmp	r3, #5
 8001bca:	d908      	bls.n	8001bde <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2220      	movs	r2, #32
 8001bd0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2203      	movs	r2, #3
 8001bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e078      	b.n	8001cd0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1e8      	bne.n	8001bbe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001bf4:	697a      	ldr	r2, [r7, #20]
 8001bf6:	4b38      	ldr	r3, [pc, #224]	; (8001cd8 <HAL_DMA_Init+0x158>)
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c2a:	697a      	ldr	r2, [r7, #20]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c34:	2b04      	cmp	r3, #4
 8001c36:	d107      	bne.n	8001c48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c40:	4313      	orrs	r3, r2
 8001c42:	697a      	ldr	r2, [r7, #20]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	f023 0307 	bic.w	r3, r3, #7
 8001c5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c64:	697a      	ldr	r2, [r7, #20]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6e:	2b04      	cmp	r3, #4
 8001c70:	d117      	bne.n	8001ca2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d00e      	beq.n	8001ca2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 fa6f 	bl	8002168 <DMA_CheckFifoParam>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d008      	beq.n	8001ca2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2240      	movs	r2, #64	; 0x40
 8001c94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e016      	b.n	8001cd0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	697a      	ldr	r2, [r7, #20]
 8001ca8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 fa26 	bl	80020fc <DMA_CalcBaseAndBitshift>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb8:	223f      	movs	r2, #63	; 0x3f
 8001cba:	409a      	lsls	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3718      	adds	r7, #24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	f010803f 	.word	0xf010803f

08001cdc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
 8001ce8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cea:	2300      	movs	r3, #0
 8001cec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d101      	bne.n	8001d02 <HAL_DMA_Start_IT+0x26>
 8001cfe:	2302      	movs	r3, #2
 8001d00:	e040      	b.n	8001d84 <HAL_DMA_Start_IT+0xa8>
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d12f      	bne.n	8001d76 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2202      	movs	r2, #2
 8001d1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2200      	movs	r2, #0
 8001d22:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	68b9      	ldr	r1, [r7, #8]
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f000 f9b8 	bl	80020a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d34:	223f      	movs	r2, #63	; 0x3f
 8001d36:	409a      	lsls	r2, r3
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f042 0216 	orr.w	r2, r2, #22
 8001d4a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d007      	beq.n	8001d64 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f042 0208 	orr.w	r2, r2, #8
 8001d62:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 0201 	orr.w	r2, r2, #1
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	e005      	b.n	8001d82 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d7e:	2302      	movs	r3, #2
 8001d80:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d82:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3718      	adds	r7, #24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d94:	2300      	movs	r3, #0
 8001d96:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d98:	4b8e      	ldr	r3, [pc, #568]	; (8001fd4 <HAL_DMA_IRQHandler+0x248>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a8e      	ldr	r2, [pc, #568]	; (8001fd8 <HAL_DMA_IRQHandler+0x24c>)
 8001d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001da2:	0a9b      	lsrs	r3, r3, #10
 8001da4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001daa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db6:	2208      	movs	r2, #8
 8001db8:	409a      	lsls	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d01a      	beq.n	8001df8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d013      	beq.n	8001df8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0204 	bic.w	r2, r2, #4
 8001dde:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de4:	2208      	movs	r2, #8
 8001de6:	409a      	lsls	r2, r3
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df0:	f043 0201 	orr.w	r2, r3, #1
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	409a      	lsls	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4013      	ands	r3, r2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d012      	beq.n	8001e2e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00b      	beq.n	8001e2e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	409a      	lsls	r2, r3
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e26:	f043 0202 	orr.w	r2, r3, #2
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e32:	2204      	movs	r2, #4
 8001e34:	409a      	lsls	r2, r3
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d012      	beq.n	8001e64 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d00b      	beq.n	8001e64 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e50:	2204      	movs	r2, #4
 8001e52:	409a      	lsls	r2, r3
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e5c:	f043 0204 	orr.w	r2, r3, #4
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e68:	2210      	movs	r2, #16
 8001e6a:	409a      	lsls	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d043      	beq.n	8001efc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0308 	and.w	r3, r3, #8
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d03c      	beq.n	8001efc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e86:	2210      	movs	r2, #16
 8001e88:	409a      	lsls	r2, r3
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d018      	beq.n	8001ece <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d108      	bne.n	8001ebc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d024      	beq.n	8001efc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	4798      	blx	r3
 8001eba:	e01f      	b.n	8001efc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d01b      	beq.n	8001efc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	4798      	blx	r3
 8001ecc:	e016      	b.n	8001efc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d107      	bne.n	8001eec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0208 	bic.w	r2, r2, #8
 8001eea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f00:	2220      	movs	r2, #32
 8001f02:	409a      	lsls	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4013      	ands	r3, r2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f000 808f 	beq.w	800202c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0310 	and.w	r3, r3, #16
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f000 8087 	beq.w	800202c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f22:	2220      	movs	r2, #32
 8001f24:	409a      	lsls	r2, r3
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b05      	cmp	r3, #5
 8001f34:	d136      	bne.n	8001fa4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 0216 	bic.w	r2, r2, #22
 8001f44:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	695a      	ldr	r2, [r3, #20]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f54:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d103      	bne.n	8001f66 <HAL_DMA_IRQHandler+0x1da>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d007      	beq.n	8001f76 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f022 0208 	bic.w	r2, r2, #8
 8001f74:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f7a:	223f      	movs	r2, #63	; 0x3f
 8001f7c:	409a      	lsls	r2, r3
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d07e      	beq.n	8002098 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	4798      	blx	r3
        }
        return;
 8001fa2:	e079      	b.n	8002098 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d01d      	beq.n	8001fee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d10d      	bne.n	8001fdc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d031      	beq.n	800202c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	4798      	blx	r3
 8001fd0:	e02c      	b.n	800202c <HAL_DMA_IRQHandler+0x2a0>
 8001fd2:	bf00      	nop
 8001fd4:	20000008 	.word	0x20000008
 8001fd8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d023      	beq.n	800202c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	4798      	blx	r3
 8001fec:	e01e      	b.n	800202c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d10f      	bne.n	800201c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 0210 	bic.w	r2, r2, #16
 800200a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002020:	2b00      	cmp	r3, #0
 8002022:	d003      	beq.n	800202c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002030:	2b00      	cmp	r3, #0
 8002032:	d032      	beq.n	800209a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b00      	cmp	r3, #0
 800203e:	d022      	beq.n	8002086 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2205      	movs	r2, #5
 8002044:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 0201 	bic.w	r2, r2, #1
 8002056:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	3301      	adds	r3, #1
 800205c:	60bb      	str	r3, [r7, #8]
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	429a      	cmp	r2, r3
 8002062:	d307      	bcc.n	8002074 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f2      	bne.n	8002058 <HAL_DMA_IRQHandler+0x2cc>
 8002072:	e000      	b.n	8002076 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002074:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800208a:	2b00      	cmp	r3, #0
 800208c:	d005      	beq.n	800209a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	4798      	blx	r3
 8002096:	e000      	b.n	800209a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002098:	bf00      	nop
    }
  }
}
 800209a:	3718      	adds	r7, #24
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
 80020ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	2b40      	cmp	r3, #64	; 0x40
 80020cc:	d108      	bne.n	80020e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80020de:	e007      	b.n	80020f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68ba      	ldr	r2, [r7, #8]
 80020e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	60da      	str	r2, [r3, #12]
}
 80020f0:	bf00      	nop
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	b2db      	uxtb	r3, r3
 800210a:	3b10      	subs	r3, #16
 800210c:	4a14      	ldr	r2, [pc, #80]	; (8002160 <DMA_CalcBaseAndBitshift+0x64>)
 800210e:	fba2 2303 	umull	r2, r3, r2, r3
 8002112:	091b      	lsrs	r3, r3, #4
 8002114:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002116:	4a13      	ldr	r2, [pc, #76]	; (8002164 <DMA_CalcBaseAndBitshift+0x68>)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	4413      	add	r3, r2
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	461a      	mov	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2b03      	cmp	r3, #3
 8002128:	d909      	bls.n	800213e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002132:	f023 0303 	bic.w	r3, r3, #3
 8002136:	1d1a      	adds	r2, r3, #4
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	659a      	str	r2, [r3, #88]	; 0x58
 800213c:	e007      	b.n	800214e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002146:	f023 0303 	bic.w	r3, r3, #3
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002152:	4618      	mov	r0, r3
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	aaaaaaab 	.word	0xaaaaaaab
 8002164:	08004e50 	.word	0x08004e50

08002168 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002170:	2300      	movs	r3, #0
 8002172:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002178:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d11f      	bne.n	80021c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	2b03      	cmp	r3, #3
 8002186:	d856      	bhi.n	8002236 <DMA_CheckFifoParam+0xce>
 8002188:	a201      	add	r2, pc, #4	; (adr r2, 8002190 <DMA_CheckFifoParam+0x28>)
 800218a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800218e:	bf00      	nop
 8002190:	080021a1 	.word	0x080021a1
 8002194:	080021b3 	.word	0x080021b3
 8002198:	080021a1 	.word	0x080021a1
 800219c:	08002237 	.word	0x08002237
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d046      	beq.n	800223a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021b0:	e043      	b.n	800223a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021ba:	d140      	bne.n	800223e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021c0:	e03d      	b.n	800223e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021ca:	d121      	bne.n	8002210 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	2b03      	cmp	r3, #3
 80021d0:	d837      	bhi.n	8002242 <DMA_CheckFifoParam+0xda>
 80021d2:	a201      	add	r2, pc, #4	; (adr r2, 80021d8 <DMA_CheckFifoParam+0x70>)
 80021d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d8:	080021e9 	.word	0x080021e9
 80021dc:	080021ef 	.word	0x080021ef
 80021e0:	080021e9 	.word	0x080021e9
 80021e4:	08002201 	.word	0x08002201
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	73fb      	strb	r3, [r7, #15]
      break;
 80021ec:	e030      	b.n	8002250 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d025      	beq.n	8002246 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021fe:	e022      	b.n	8002246 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002204:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002208:	d11f      	bne.n	800224a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800220e:	e01c      	b.n	800224a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	2b02      	cmp	r3, #2
 8002214:	d903      	bls.n	800221e <DMA_CheckFifoParam+0xb6>
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	2b03      	cmp	r3, #3
 800221a:	d003      	beq.n	8002224 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800221c:	e018      	b.n	8002250 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	73fb      	strb	r3, [r7, #15]
      break;
 8002222:	e015      	b.n	8002250 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002228:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00e      	beq.n	800224e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	73fb      	strb	r3, [r7, #15]
      break;
 8002234:	e00b      	b.n	800224e <DMA_CheckFifoParam+0xe6>
      break;
 8002236:	bf00      	nop
 8002238:	e00a      	b.n	8002250 <DMA_CheckFifoParam+0xe8>
      break;
 800223a:	bf00      	nop
 800223c:	e008      	b.n	8002250 <DMA_CheckFifoParam+0xe8>
      break;
 800223e:	bf00      	nop
 8002240:	e006      	b.n	8002250 <DMA_CheckFifoParam+0xe8>
      break;
 8002242:	bf00      	nop
 8002244:	e004      	b.n	8002250 <DMA_CheckFifoParam+0xe8>
      break;
 8002246:	bf00      	nop
 8002248:	e002      	b.n	8002250 <DMA_CheckFifoParam+0xe8>
      break;   
 800224a:	bf00      	nop
 800224c:	e000      	b.n	8002250 <DMA_CheckFifoParam+0xe8>
      break;
 800224e:	bf00      	nop
    }
  } 
  
  return status; 
 8002250:	7bfb      	ldrb	r3, [r7, #15]
}
 8002252:	4618      	mov	r0, r3
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop

08002260 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002260:	b480      	push	{r7}
 8002262:	b089      	sub	sp, #36	; 0x24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800226a:	2300      	movs	r3, #0
 800226c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800226e:	2300      	movs	r3, #0
 8002270:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002272:	2300      	movs	r3, #0
 8002274:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002276:	2300      	movs	r3, #0
 8002278:	61fb      	str	r3, [r7, #28]
 800227a:	e159      	b.n	8002530 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800227c:	2201      	movs	r2, #1
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	4013      	ands	r3, r2
 800228e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	429a      	cmp	r2, r3
 8002296:	f040 8148 	bne.w	800252a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f003 0303 	and.w	r3, r3, #3
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d005      	beq.n	80022b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d130      	bne.n	8002314 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	2203      	movs	r2, #3
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	43db      	mvns	r3, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4013      	ands	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	68da      	ldr	r2, [r3, #12]
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	4313      	orrs	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022e8:	2201      	movs	r2, #1
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4013      	ands	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	091b      	lsrs	r3, r3, #4
 80022fe:	f003 0201 	and.w	r2, r3, #1
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f003 0303 	and.w	r3, r3, #3
 800231c:	2b03      	cmp	r3, #3
 800231e:	d017      	beq.n	8002350 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	2203      	movs	r2, #3
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4013      	ands	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 0303 	and.w	r3, r3, #3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d123      	bne.n	80023a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	08da      	lsrs	r2, r3, #3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3208      	adds	r2, #8
 8002364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002368:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	f003 0307 	and.w	r3, r3, #7
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	220f      	movs	r2, #15
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	43db      	mvns	r3, r3
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4013      	ands	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	691a      	ldr	r2, [r3, #16]
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4313      	orrs	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	08da      	lsrs	r2, r3, #3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3208      	adds	r2, #8
 800239e:	69b9      	ldr	r1, [r7, #24]
 80023a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	2203      	movs	r2, #3
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4013      	ands	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f003 0203 	and.w	r2, r3, #3
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 80a2 	beq.w	800252a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	4b57      	ldr	r3, [pc, #348]	; (8002548 <HAL_GPIO_Init+0x2e8>)
 80023ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ee:	4a56      	ldr	r2, [pc, #344]	; (8002548 <HAL_GPIO_Init+0x2e8>)
 80023f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023f4:	6453      	str	r3, [r2, #68]	; 0x44
 80023f6:	4b54      	ldr	r3, [pc, #336]	; (8002548 <HAL_GPIO_Init+0x2e8>)
 80023f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002402:	4a52      	ldr	r2, [pc, #328]	; (800254c <HAL_GPIO_Init+0x2ec>)
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	089b      	lsrs	r3, r3, #2
 8002408:	3302      	adds	r3, #2
 800240a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800240e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	220f      	movs	r2, #15
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43db      	mvns	r3, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4013      	ands	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a49      	ldr	r2, [pc, #292]	; (8002550 <HAL_GPIO_Init+0x2f0>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d019      	beq.n	8002462 <HAL_GPIO_Init+0x202>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a48      	ldr	r2, [pc, #288]	; (8002554 <HAL_GPIO_Init+0x2f4>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d013      	beq.n	800245e <HAL_GPIO_Init+0x1fe>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a47      	ldr	r2, [pc, #284]	; (8002558 <HAL_GPIO_Init+0x2f8>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d00d      	beq.n	800245a <HAL_GPIO_Init+0x1fa>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a46      	ldr	r2, [pc, #280]	; (800255c <HAL_GPIO_Init+0x2fc>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d007      	beq.n	8002456 <HAL_GPIO_Init+0x1f6>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a45      	ldr	r2, [pc, #276]	; (8002560 <HAL_GPIO_Init+0x300>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d101      	bne.n	8002452 <HAL_GPIO_Init+0x1f2>
 800244e:	2304      	movs	r3, #4
 8002450:	e008      	b.n	8002464 <HAL_GPIO_Init+0x204>
 8002452:	2307      	movs	r3, #7
 8002454:	e006      	b.n	8002464 <HAL_GPIO_Init+0x204>
 8002456:	2303      	movs	r3, #3
 8002458:	e004      	b.n	8002464 <HAL_GPIO_Init+0x204>
 800245a:	2302      	movs	r3, #2
 800245c:	e002      	b.n	8002464 <HAL_GPIO_Init+0x204>
 800245e:	2301      	movs	r3, #1
 8002460:	e000      	b.n	8002464 <HAL_GPIO_Init+0x204>
 8002462:	2300      	movs	r3, #0
 8002464:	69fa      	ldr	r2, [r7, #28]
 8002466:	f002 0203 	and.w	r2, r2, #3
 800246a:	0092      	lsls	r2, r2, #2
 800246c:	4093      	lsls	r3, r2
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4313      	orrs	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002474:	4935      	ldr	r1, [pc, #212]	; (800254c <HAL_GPIO_Init+0x2ec>)
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	089b      	lsrs	r3, r3, #2
 800247a:	3302      	adds	r3, #2
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002482:	4b38      	ldr	r3, [pc, #224]	; (8002564 <HAL_GPIO_Init+0x304>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	43db      	mvns	r3, r3
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	4013      	ands	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024a6:	4a2f      	ldr	r2, [pc, #188]	; (8002564 <HAL_GPIO_Init+0x304>)
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024ac:	4b2d      	ldr	r3, [pc, #180]	; (8002564 <HAL_GPIO_Init+0x304>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	43db      	mvns	r3, r3
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4013      	ands	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d003      	beq.n	80024d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024d0:	4a24      	ldr	r2, [pc, #144]	; (8002564 <HAL_GPIO_Init+0x304>)
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024d6:	4b23      	ldr	r3, [pc, #140]	; (8002564 <HAL_GPIO_Init+0x304>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	43db      	mvns	r3, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4013      	ands	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024fa:	4a1a      	ldr	r2, [pc, #104]	; (8002564 <HAL_GPIO_Init+0x304>)
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002500:	4b18      	ldr	r3, [pc, #96]	; (8002564 <HAL_GPIO_Init+0x304>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	43db      	mvns	r3, r3
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4013      	ands	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d003      	beq.n	8002524 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	4313      	orrs	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002524:	4a0f      	ldr	r2, [pc, #60]	; (8002564 <HAL_GPIO_Init+0x304>)
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	3301      	adds	r3, #1
 800252e:	61fb      	str	r3, [r7, #28]
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	2b0f      	cmp	r3, #15
 8002534:	f67f aea2 	bls.w	800227c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002538:	bf00      	nop
 800253a:	bf00      	nop
 800253c:	3724      	adds	r7, #36	; 0x24
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	40023800 	.word	0x40023800
 800254c:	40013800 	.word	0x40013800
 8002550:	40020000 	.word	0x40020000
 8002554:	40020400 	.word	0x40020400
 8002558:	40020800 	.word	0x40020800
 800255c:	40020c00 	.word	0x40020c00
 8002560:	40021000 	.word	0x40021000
 8002564:	40013c00 	.word	0x40013c00

08002568 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	460b      	mov	r3, r1
 8002572:	807b      	strh	r3, [r7, #2]
 8002574:	4613      	mov	r3, r2
 8002576:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002578:	787b      	ldrb	r3, [r7, #1]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800257e:	887a      	ldrh	r2, [r7, #2]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002584:	e003      	b.n	800258e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002586:	887b      	ldrh	r3, [r7, #2]
 8002588:	041a      	lsls	r2, r3, #16
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	619a      	str	r2, [r3, #24]
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
	...

0800259c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e267      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d075      	beq.n	80026a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025ba:	4b88      	ldr	r3, [pc, #544]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 030c 	and.w	r3, r3, #12
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	d00c      	beq.n	80025e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025c6:	4b85      	ldr	r3, [pc, #532]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025ce:	2b08      	cmp	r3, #8
 80025d0:	d112      	bne.n	80025f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025d2:	4b82      	ldr	r3, [pc, #520]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025de:	d10b      	bne.n	80025f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e0:	4b7e      	ldr	r3, [pc, #504]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d05b      	beq.n	80026a4 <HAL_RCC_OscConfig+0x108>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d157      	bne.n	80026a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e242      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002600:	d106      	bne.n	8002610 <HAL_RCC_OscConfig+0x74>
 8002602:	4b76      	ldr	r3, [pc, #472]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a75      	ldr	r2, [pc, #468]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800260c:	6013      	str	r3, [r2, #0]
 800260e:	e01d      	b.n	800264c <HAL_RCC_OscConfig+0xb0>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002618:	d10c      	bne.n	8002634 <HAL_RCC_OscConfig+0x98>
 800261a:	4b70      	ldr	r3, [pc, #448]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a6f      	ldr	r2, [pc, #444]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002620:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	4b6d      	ldr	r3, [pc, #436]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a6c      	ldr	r2, [pc, #432]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 800262c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	e00b      	b.n	800264c <HAL_RCC_OscConfig+0xb0>
 8002634:	4b69      	ldr	r3, [pc, #420]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a68      	ldr	r2, [pc, #416]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 800263a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800263e:	6013      	str	r3, [r2, #0]
 8002640:	4b66      	ldr	r3, [pc, #408]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a65      	ldr	r2, [pc, #404]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002646:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800264a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d013      	beq.n	800267c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002654:	f7ff f976 	bl	8001944 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800265c:	f7ff f972 	bl	8001944 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b64      	cmp	r3, #100	; 0x64
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e207      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800266e:	4b5b      	ldr	r3, [pc, #364]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0f0      	beq.n	800265c <HAL_RCC_OscConfig+0xc0>
 800267a:	e014      	b.n	80026a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267c:	f7ff f962 	bl	8001944 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002684:	f7ff f95e 	bl	8001944 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b64      	cmp	r3, #100	; 0x64
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e1f3      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002696:	4b51      	ldr	r3, [pc, #324]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1f0      	bne.n	8002684 <HAL_RCC_OscConfig+0xe8>
 80026a2:	e000      	b.n	80026a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d063      	beq.n	800277a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026b2:	4b4a      	ldr	r3, [pc, #296]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 030c 	and.w	r3, r3, #12
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00b      	beq.n	80026d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026be:	4b47      	ldr	r3, [pc, #284]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026c6:	2b08      	cmp	r3, #8
 80026c8:	d11c      	bne.n	8002704 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ca:	4b44      	ldr	r3, [pc, #272]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d116      	bne.n	8002704 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026d6:	4b41      	ldr	r3, [pc, #260]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d005      	beq.n	80026ee <HAL_RCC_OscConfig+0x152>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d001      	beq.n	80026ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e1c7      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ee:	4b3b      	ldr	r3, [pc, #236]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	4937      	ldr	r1, [pc, #220]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002702:	e03a      	b.n	800277a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d020      	beq.n	800274e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800270c:	4b34      	ldr	r3, [pc, #208]	; (80027e0 <HAL_RCC_OscConfig+0x244>)
 800270e:	2201      	movs	r2, #1
 8002710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002712:	f7ff f917 	bl	8001944 <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002718:	e008      	b.n	800272c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800271a:	f7ff f913 	bl	8001944 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e1a8      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800272c:	4b2b      	ldr	r3, [pc, #172]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d0f0      	beq.n	800271a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002738:	4b28      	ldr	r3, [pc, #160]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	4925      	ldr	r1, [pc, #148]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002748:	4313      	orrs	r3, r2
 800274a:	600b      	str	r3, [r1, #0]
 800274c:	e015      	b.n	800277a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800274e:	4b24      	ldr	r3, [pc, #144]	; (80027e0 <HAL_RCC_OscConfig+0x244>)
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002754:	f7ff f8f6 	bl	8001944 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800275c:	f7ff f8f2 	bl	8001944 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e187      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800276e:	4b1b      	ldr	r3, [pc, #108]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f0      	bne.n	800275c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b00      	cmp	r3, #0
 8002784:	d036      	beq.n	80027f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d016      	beq.n	80027bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800278e:	4b15      	ldr	r3, [pc, #84]	; (80027e4 <HAL_RCC_OscConfig+0x248>)
 8002790:	2201      	movs	r2, #1
 8002792:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002794:	f7ff f8d6 	bl	8001944 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800279c:	f7ff f8d2 	bl	8001944 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e167      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ae:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80027b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0f0      	beq.n	800279c <HAL_RCC_OscConfig+0x200>
 80027ba:	e01b      	b.n	80027f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027bc:	4b09      	ldr	r3, [pc, #36]	; (80027e4 <HAL_RCC_OscConfig+0x248>)
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c2:	f7ff f8bf 	bl	8001944 <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027c8:	e00e      	b.n	80027e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027ca:	f7ff f8bb 	bl	8001944 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d907      	bls.n	80027e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e150      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
 80027dc:	40023800 	.word	0x40023800
 80027e0:	42470000 	.word	0x42470000
 80027e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027e8:	4b88      	ldr	r3, [pc, #544]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 80027ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1ea      	bne.n	80027ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f000 8097 	beq.w	8002930 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002802:	2300      	movs	r3, #0
 8002804:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002806:	4b81      	ldr	r3, [pc, #516]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10f      	bne.n	8002832 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	60bb      	str	r3, [r7, #8]
 8002816:	4b7d      	ldr	r3, [pc, #500]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	4a7c      	ldr	r2, [pc, #496]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 800281c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002820:	6413      	str	r3, [r2, #64]	; 0x40
 8002822:	4b7a      	ldr	r3, [pc, #488]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282a:	60bb      	str	r3, [r7, #8]
 800282c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800282e:	2301      	movs	r3, #1
 8002830:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002832:	4b77      	ldr	r3, [pc, #476]	; (8002a10 <HAL_RCC_OscConfig+0x474>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283a:	2b00      	cmp	r3, #0
 800283c:	d118      	bne.n	8002870 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800283e:	4b74      	ldr	r3, [pc, #464]	; (8002a10 <HAL_RCC_OscConfig+0x474>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a73      	ldr	r2, [pc, #460]	; (8002a10 <HAL_RCC_OscConfig+0x474>)
 8002844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002848:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800284a:	f7ff f87b 	bl	8001944 <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002852:	f7ff f877 	bl	8001944 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e10c      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002864:	4b6a      	ldr	r3, [pc, #424]	; (8002a10 <HAL_RCC_OscConfig+0x474>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0f0      	beq.n	8002852 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d106      	bne.n	8002886 <HAL_RCC_OscConfig+0x2ea>
 8002878:	4b64      	ldr	r3, [pc, #400]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 800287a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287c:	4a63      	ldr	r2, [pc, #396]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 800287e:	f043 0301 	orr.w	r3, r3, #1
 8002882:	6713      	str	r3, [r2, #112]	; 0x70
 8002884:	e01c      	b.n	80028c0 <HAL_RCC_OscConfig+0x324>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	2b05      	cmp	r3, #5
 800288c:	d10c      	bne.n	80028a8 <HAL_RCC_OscConfig+0x30c>
 800288e:	4b5f      	ldr	r3, [pc, #380]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 8002890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002892:	4a5e      	ldr	r2, [pc, #376]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 8002894:	f043 0304 	orr.w	r3, r3, #4
 8002898:	6713      	str	r3, [r2, #112]	; 0x70
 800289a:	4b5c      	ldr	r3, [pc, #368]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 800289c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289e:	4a5b      	ldr	r2, [pc, #364]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	6713      	str	r3, [r2, #112]	; 0x70
 80028a6:	e00b      	b.n	80028c0 <HAL_RCC_OscConfig+0x324>
 80028a8:	4b58      	ldr	r3, [pc, #352]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 80028aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ac:	4a57      	ldr	r2, [pc, #348]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 80028ae:	f023 0301 	bic.w	r3, r3, #1
 80028b2:	6713      	str	r3, [r2, #112]	; 0x70
 80028b4:	4b55      	ldr	r3, [pc, #340]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 80028b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b8:	4a54      	ldr	r2, [pc, #336]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 80028ba:	f023 0304 	bic.w	r3, r3, #4
 80028be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d015      	beq.n	80028f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c8:	f7ff f83c 	bl	8001944 <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ce:	e00a      	b.n	80028e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028d0:	f7ff f838 	bl	8001944 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	f241 3288 	movw	r2, #5000	; 0x1388
 80028de:	4293      	cmp	r3, r2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e0cb      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028e6:	4b49      	ldr	r3, [pc, #292]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 80028e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d0ee      	beq.n	80028d0 <HAL_RCC_OscConfig+0x334>
 80028f2:	e014      	b.n	800291e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028f4:	f7ff f826 	bl	8001944 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028fa:	e00a      	b.n	8002912 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028fc:	f7ff f822 	bl	8001944 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	f241 3288 	movw	r2, #5000	; 0x1388
 800290a:	4293      	cmp	r3, r2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e0b5      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002912:	4b3e      	ldr	r3, [pc, #248]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 8002914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1ee      	bne.n	80028fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800291e:	7dfb      	ldrb	r3, [r7, #23]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d105      	bne.n	8002930 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002924:	4b39      	ldr	r3, [pc, #228]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 8002926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002928:	4a38      	ldr	r2, [pc, #224]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 800292a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800292e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 80a1 	beq.w	8002a7c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800293a:	4b34      	ldr	r3, [pc, #208]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 030c 	and.w	r3, r3, #12
 8002942:	2b08      	cmp	r3, #8
 8002944:	d05c      	beq.n	8002a00 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	2b02      	cmp	r3, #2
 800294c:	d141      	bne.n	80029d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800294e:	4b31      	ldr	r3, [pc, #196]	; (8002a14 <HAL_RCC_OscConfig+0x478>)
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002954:	f7fe fff6 	bl	8001944 <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800295c:	f7fe fff2 	bl	8001944 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e087      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800296e:	4b27      	ldr	r3, [pc, #156]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1f0      	bne.n	800295c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69da      	ldr	r2, [r3, #28]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	431a      	orrs	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	019b      	lsls	r3, r3, #6
 800298a:	431a      	orrs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002990:	085b      	lsrs	r3, r3, #1
 8002992:	3b01      	subs	r3, #1
 8002994:	041b      	lsls	r3, r3, #16
 8002996:	431a      	orrs	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299c:	061b      	lsls	r3, r3, #24
 800299e:	491b      	ldr	r1, [pc, #108]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029a4:	4b1b      	ldr	r3, [pc, #108]	; (8002a14 <HAL_RCC_OscConfig+0x478>)
 80029a6:	2201      	movs	r2, #1
 80029a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029aa:	f7fe ffcb 	bl	8001944 <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029b2:	f7fe ffc7 	bl	8001944 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e05c      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029c4:	4b11      	ldr	r3, [pc, #68]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0f0      	beq.n	80029b2 <HAL_RCC_OscConfig+0x416>
 80029d0:	e054      	b.n	8002a7c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d2:	4b10      	ldr	r3, [pc, #64]	; (8002a14 <HAL_RCC_OscConfig+0x478>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d8:	f7fe ffb4 	bl	8001944 <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029e0:	f7fe ffb0 	bl	8001944 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e045      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029f2:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1f0      	bne.n	80029e0 <HAL_RCC_OscConfig+0x444>
 80029fe:	e03d      	b.n	8002a7c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d107      	bne.n	8002a18 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e038      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	40007000 	.word	0x40007000
 8002a14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a18:	4b1b      	ldr	r3, [pc, #108]	; (8002a88 <HAL_RCC_OscConfig+0x4ec>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d028      	beq.n	8002a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d121      	bne.n	8002a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d11a      	bne.n	8002a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a48:	4013      	ands	r3, r2
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d111      	bne.n	8002a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5e:	085b      	lsrs	r3, r3, #1
 8002a60:	3b01      	subs	r3, #1
 8002a62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d107      	bne.n	8002a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d001      	beq.n	8002a7c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e000      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3718      	adds	r7, #24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40023800 	.word	0x40023800

08002a8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e0cc      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002aa0:	4b68      	ldr	r3, [pc, #416]	; (8002c44 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d90c      	bls.n	8002ac8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aae:	4b65      	ldr	r3, [pc, #404]	; (8002c44 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ab6:	4b63      	ldr	r3, [pc, #396]	; (8002c44 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d001      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e0b8      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d020      	beq.n	8002b16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d005      	beq.n	8002aec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ae0:	4b59      	ldr	r3, [pc, #356]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	4a58      	ldr	r2, [pc, #352]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002aea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0308 	and.w	r3, r3, #8
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002af8:	4b53      	ldr	r3, [pc, #332]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	4a52      	ldr	r2, [pc, #328]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002afe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b04:	4b50      	ldr	r3, [pc, #320]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	494d      	ldr	r1, [pc, #308]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d044      	beq.n	8002bac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d107      	bne.n	8002b3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b2a:	4b47      	ldr	r3, [pc, #284]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d119      	bne.n	8002b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e07f      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d003      	beq.n	8002b4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b46:	2b03      	cmp	r3, #3
 8002b48:	d107      	bne.n	8002b5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b4a:	4b3f      	ldr	r3, [pc, #252]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d109      	bne.n	8002b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e06f      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b5a:	4b3b      	ldr	r3, [pc, #236]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e067      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b6a:	4b37      	ldr	r3, [pc, #220]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f023 0203 	bic.w	r2, r3, #3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	4934      	ldr	r1, [pc, #208]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b7c:	f7fe fee2 	bl	8001944 <HAL_GetTick>
 8002b80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b82:	e00a      	b.n	8002b9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b84:	f7fe fede 	bl	8001944 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e04f      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b9a:	4b2b      	ldr	r3, [pc, #172]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f003 020c 	and.w	r2, r3, #12
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d1eb      	bne.n	8002b84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bac:	4b25      	ldr	r3, [pc, #148]	; (8002c44 <HAL_RCC_ClockConfig+0x1b8>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d20c      	bcs.n	8002bd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bba:	4b22      	ldr	r3, [pc, #136]	; (8002c44 <HAL_RCC_ClockConfig+0x1b8>)
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc2:	4b20      	ldr	r3, [pc, #128]	; (8002c44 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d001      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e032      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d008      	beq.n	8002bf2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002be0:	4b19      	ldr	r3, [pc, #100]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	4916      	ldr	r1, [pc, #88]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0308 	and.w	r3, r3, #8
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d009      	beq.n	8002c12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bfe:	4b12      	ldr	r3, [pc, #72]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	490e      	ldr	r1, [pc, #56]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c12:	f000 f821 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8002c16:	4602      	mov	r2, r0
 8002c18:	4b0b      	ldr	r3, [pc, #44]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	091b      	lsrs	r3, r3, #4
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	490a      	ldr	r1, [pc, #40]	; (8002c4c <HAL_RCC_ClockConfig+0x1c0>)
 8002c24:	5ccb      	ldrb	r3, [r1, r3]
 8002c26:	fa22 f303 	lsr.w	r3, r2, r3
 8002c2a:	4a09      	ldr	r2, [pc, #36]	; (8002c50 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c2e:	4b09      	ldr	r3, [pc, #36]	; (8002c54 <HAL_RCC_ClockConfig+0x1c8>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fe fe42 	bl	80018bc <HAL_InitTick>

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40023c00 	.word	0x40023c00
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	08004e38 	.word	0x08004e38
 8002c50:	20000008 	.word	0x20000008
 8002c54:	2000000c 	.word	0x2000000c

08002c58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c5c:	b094      	sub	sp, #80	; 0x50
 8002c5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	647b      	str	r3, [r7, #68]	; 0x44
 8002c64:	2300      	movs	r3, #0
 8002c66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c68:	2300      	movs	r3, #0
 8002c6a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c70:	4b79      	ldr	r3, [pc, #484]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f003 030c 	and.w	r3, r3, #12
 8002c78:	2b08      	cmp	r3, #8
 8002c7a:	d00d      	beq.n	8002c98 <HAL_RCC_GetSysClockFreq+0x40>
 8002c7c:	2b08      	cmp	r3, #8
 8002c7e:	f200 80e1 	bhi.w	8002e44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d002      	beq.n	8002c8c <HAL_RCC_GetSysClockFreq+0x34>
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d003      	beq.n	8002c92 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c8a:	e0db      	b.n	8002e44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c8c:	4b73      	ldr	r3, [pc, #460]	; (8002e5c <HAL_RCC_GetSysClockFreq+0x204>)
 8002c8e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002c90:	e0db      	b.n	8002e4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c92:	4b73      	ldr	r3, [pc, #460]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c96:	e0d8      	b.n	8002e4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c98:	4b6f      	ldr	r3, [pc, #444]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ca0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ca2:	4b6d      	ldr	r3, [pc, #436]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d063      	beq.n	8002d76 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cae:	4b6a      	ldr	r3, [pc, #424]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	099b      	lsrs	r3, r3, #6
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cb8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cc0:	633b      	str	r3, [r7, #48]	; 0x30
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	637b      	str	r3, [r7, #52]	; 0x34
 8002cc6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002cca:	4622      	mov	r2, r4
 8002ccc:	462b      	mov	r3, r5
 8002cce:	f04f 0000 	mov.w	r0, #0
 8002cd2:	f04f 0100 	mov.w	r1, #0
 8002cd6:	0159      	lsls	r1, r3, #5
 8002cd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cdc:	0150      	lsls	r0, r2, #5
 8002cde:	4602      	mov	r2, r0
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	4621      	mov	r1, r4
 8002ce4:	1a51      	subs	r1, r2, r1
 8002ce6:	6139      	str	r1, [r7, #16]
 8002ce8:	4629      	mov	r1, r5
 8002cea:	eb63 0301 	sbc.w	r3, r3, r1
 8002cee:	617b      	str	r3, [r7, #20]
 8002cf0:	f04f 0200 	mov.w	r2, #0
 8002cf4:	f04f 0300 	mov.w	r3, #0
 8002cf8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cfc:	4659      	mov	r1, fp
 8002cfe:	018b      	lsls	r3, r1, #6
 8002d00:	4651      	mov	r1, sl
 8002d02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d06:	4651      	mov	r1, sl
 8002d08:	018a      	lsls	r2, r1, #6
 8002d0a:	4651      	mov	r1, sl
 8002d0c:	ebb2 0801 	subs.w	r8, r2, r1
 8002d10:	4659      	mov	r1, fp
 8002d12:	eb63 0901 	sbc.w	r9, r3, r1
 8002d16:	f04f 0200 	mov.w	r2, #0
 8002d1a:	f04f 0300 	mov.w	r3, #0
 8002d1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d2a:	4690      	mov	r8, r2
 8002d2c:	4699      	mov	r9, r3
 8002d2e:	4623      	mov	r3, r4
 8002d30:	eb18 0303 	adds.w	r3, r8, r3
 8002d34:	60bb      	str	r3, [r7, #8]
 8002d36:	462b      	mov	r3, r5
 8002d38:	eb49 0303 	adc.w	r3, r9, r3
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	f04f 0300 	mov.w	r3, #0
 8002d46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d4a:	4629      	mov	r1, r5
 8002d4c:	024b      	lsls	r3, r1, #9
 8002d4e:	4621      	mov	r1, r4
 8002d50:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d54:	4621      	mov	r1, r4
 8002d56:	024a      	lsls	r2, r1, #9
 8002d58:	4610      	mov	r0, r2
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d5e:	2200      	movs	r2, #0
 8002d60:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d68:	f7fd fe54 	bl	8000a14 <__aeabi_uldivmod>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	460b      	mov	r3, r1
 8002d70:	4613      	mov	r3, r2
 8002d72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d74:	e058      	b.n	8002e28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d76:	4b38      	ldr	r3, [pc, #224]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	099b      	lsrs	r3, r3, #6
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	4618      	mov	r0, r3
 8002d80:	4611      	mov	r1, r2
 8002d82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d86:	623b      	str	r3, [r7, #32]
 8002d88:	2300      	movs	r3, #0
 8002d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d90:	4642      	mov	r2, r8
 8002d92:	464b      	mov	r3, r9
 8002d94:	f04f 0000 	mov.w	r0, #0
 8002d98:	f04f 0100 	mov.w	r1, #0
 8002d9c:	0159      	lsls	r1, r3, #5
 8002d9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002da2:	0150      	lsls	r0, r2, #5
 8002da4:	4602      	mov	r2, r0
 8002da6:	460b      	mov	r3, r1
 8002da8:	4641      	mov	r1, r8
 8002daa:	ebb2 0a01 	subs.w	sl, r2, r1
 8002dae:	4649      	mov	r1, r9
 8002db0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002db4:	f04f 0200 	mov.w	r2, #0
 8002db8:	f04f 0300 	mov.w	r3, #0
 8002dbc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002dc0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002dc4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002dc8:	ebb2 040a 	subs.w	r4, r2, sl
 8002dcc:	eb63 050b 	sbc.w	r5, r3, fp
 8002dd0:	f04f 0200 	mov.w	r2, #0
 8002dd4:	f04f 0300 	mov.w	r3, #0
 8002dd8:	00eb      	lsls	r3, r5, #3
 8002dda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dde:	00e2      	lsls	r2, r4, #3
 8002de0:	4614      	mov	r4, r2
 8002de2:	461d      	mov	r5, r3
 8002de4:	4643      	mov	r3, r8
 8002de6:	18e3      	adds	r3, r4, r3
 8002de8:	603b      	str	r3, [r7, #0]
 8002dea:	464b      	mov	r3, r9
 8002dec:	eb45 0303 	adc.w	r3, r5, r3
 8002df0:	607b      	str	r3, [r7, #4]
 8002df2:	f04f 0200 	mov.w	r2, #0
 8002df6:	f04f 0300 	mov.w	r3, #0
 8002dfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dfe:	4629      	mov	r1, r5
 8002e00:	028b      	lsls	r3, r1, #10
 8002e02:	4621      	mov	r1, r4
 8002e04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e08:	4621      	mov	r1, r4
 8002e0a:	028a      	lsls	r2, r1, #10
 8002e0c:	4610      	mov	r0, r2
 8002e0e:	4619      	mov	r1, r3
 8002e10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e12:	2200      	movs	r2, #0
 8002e14:	61bb      	str	r3, [r7, #24]
 8002e16:	61fa      	str	r2, [r7, #28]
 8002e18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e1c:	f7fd fdfa 	bl	8000a14 <__aeabi_uldivmod>
 8002e20:	4602      	mov	r2, r0
 8002e22:	460b      	mov	r3, r1
 8002e24:	4613      	mov	r3, r2
 8002e26:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e28:	4b0b      	ldr	r3, [pc, #44]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	0c1b      	lsrs	r3, r3, #16
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	3301      	adds	r3, #1
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002e38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e42:	e002      	b.n	8002e4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e44:	4b05      	ldr	r3, [pc, #20]	; (8002e5c <HAL_RCC_GetSysClockFreq+0x204>)
 8002e46:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3750      	adds	r7, #80	; 0x50
 8002e50:	46bd      	mov	sp, r7
 8002e52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e56:	bf00      	nop
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	00f42400 	.word	0x00f42400
 8002e60:	007a1200 	.word	0x007a1200

08002e64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e68:	4b03      	ldr	r3, [pc, #12]	; (8002e78 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	20000008 	.word	0x20000008

08002e7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e80:	f7ff fff0 	bl	8002e64 <HAL_RCC_GetHCLKFreq>
 8002e84:	4602      	mov	r2, r0
 8002e86:	4b05      	ldr	r3, [pc, #20]	; (8002e9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	0a9b      	lsrs	r3, r3, #10
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	4903      	ldr	r1, [pc, #12]	; (8002ea0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e92:	5ccb      	ldrb	r3, [r1, r3]
 8002e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	08004e48 	.word	0x08004e48

08002ea4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ea8:	f7ff ffdc 	bl	8002e64 <HAL_RCC_GetHCLKFreq>
 8002eac:	4602      	mov	r2, r0
 8002eae:	4b05      	ldr	r3, [pc, #20]	; (8002ec4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	0b5b      	lsrs	r3, r3, #13
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	4903      	ldr	r1, [pc, #12]	; (8002ec8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002eba:	5ccb      	ldrb	r3, [r1, r3]
 8002ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	08004e48 	.word	0x08004e48

08002ecc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e041      	b.n	8002f62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d106      	bne.n	8002ef8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7fe faec 	bl	80014d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2202      	movs	r2, #2
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	3304      	adds	r3, #4
 8002f08:	4619      	mov	r1, r3
 8002f0a:	4610      	mov	r0, r2
 8002f0c:	f000 ffdc 	bl	8003ec8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
	...

08002f6c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d001      	beq.n	8002f84 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e03c      	b.n	8002ffe <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2202      	movs	r2, #2
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a1e      	ldr	r2, [pc, #120]	; (800300c <HAL_TIM_Base_Start+0xa0>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d018      	beq.n	8002fc8 <HAL_TIM_Base_Start+0x5c>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f9e:	d013      	beq.n	8002fc8 <HAL_TIM_Base_Start+0x5c>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a1a      	ldr	r2, [pc, #104]	; (8003010 <HAL_TIM_Base_Start+0xa4>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d00e      	beq.n	8002fc8 <HAL_TIM_Base_Start+0x5c>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a19      	ldr	r2, [pc, #100]	; (8003014 <HAL_TIM_Base_Start+0xa8>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d009      	beq.n	8002fc8 <HAL_TIM_Base_Start+0x5c>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a17      	ldr	r2, [pc, #92]	; (8003018 <HAL_TIM_Base_Start+0xac>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d004      	beq.n	8002fc8 <HAL_TIM_Base_Start+0x5c>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a16      	ldr	r2, [pc, #88]	; (800301c <HAL_TIM_Base_Start+0xb0>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d111      	bne.n	8002fec <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 0307 	and.w	r3, r3, #7
 8002fd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2b06      	cmp	r3, #6
 8002fd8:	d010      	beq.n	8002ffc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f042 0201 	orr.w	r2, r2, #1
 8002fe8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fea:	e007      	b.n	8002ffc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f042 0201 	orr.w	r2, r2, #1
 8002ffa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3714      	adds	r7, #20
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	40010000 	.word	0x40010000
 8003010:	40000400 	.word	0x40000400
 8003014:	40000800 	.word	0x40000800
 8003018:	40000c00 	.word	0x40000c00
 800301c:	40014000 	.word	0x40014000

08003020 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e041      	b.n	80030b6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d106      	bne.n	800304c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 f839 	bl	80030be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2202      	movs	r2, #2
 8003050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	3304      	adds	r3, #4
 800305c:	4619      	mov	r1, r3
 800305e:	4610      	mov	r0, r2
 8003060:	f000 ff32 	bl	8003ec8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
	...

080030d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d109      	bne.n	80030f8 <HAL_TIM_PWM_Start+0x24>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	bf14      	ite	ne
 80030f0:	2301      	movne	r3, #1
 80030f2:	2300      	moveq	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	e022      	b.n	800313e <HAL_TIM_PWM_Start+0x6a>
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	d109      	bne.n	8003112 <HAL_TIM_PWM_Start+0x3e>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b01      	cmp	r3, #1
 8003108:	bf14      	ite	ne
 800310a:	2301      	movne	r3, #1
 800310c:	2300      	moveq	r3, #0
 800310e:	b2db      	uxtb	r3, r3
 8003110:	e015      	b.n	800313e <HAL_TIM_PWM_Start+0x6a>
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	2b08      	cmp	r3, #8
 8003116:	d109      	bne.n	800312c <HAL_TIM_PWM_Start+0x58>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b01      	cmp	r3, #1
 8003122:	bf14      	ite	ne
 8003124:	2301      	movne	r3, #1
 8003126:	2300      	moveq	r3, #0
 8003128:	b2db      	uxtb	r3, r3
 800312a:	e008      	b.n	800313e <HAL_TIM_PWM_Start+0x6a>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b01      	cmp	r3, #1
 8003136:	bf14      	ite	ne
 8003138:	2301      	movne	r3, #1
 800313a:	2300      	moveq	r3, #0
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e068      	b.n	8003218 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d104      	bne.n	8003156 <HAL_TIM_PWM_Start+0x82>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2202      	movs	r2, #2
 8003150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003154:	e013      	b.n	800317e <HAL_TIM_PWM_Start+0xaa>
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	2b04      	cmp	r3, #4
 800315a:	d104      	bne.n	8003166 <HAL_TIM_PWM_Start+0x92>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2202      	movs	r2, #2
 8003160:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003164:	e00b      	b.n	800317e <HAL_TIM_PWM_Start+0xaa>
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	2b08      	cmp	r3, #8
 800316a:	d104      	bne.n	8003176 <HAL_TIM_PWM_Start+0xa2>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2202      	movs	r2, #2
 8003170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003174:	e003      	b.n	800317e <HAL_TIM_PWM_Start+0xaa>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2202      	movs	r2, #2
 800317a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2201      	movs	r2, #1
 8003184:	6839      	ldr	r1, [r7, #0]
 8003186:	4618      	mov	r0, r3
 8003188:	f001 fa62 	bl	8004650 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a23      	ldr	r2, [pc, #140]	; (8003220 <HAL_TIM_PWM_Start+0x14c>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d107      	bne.n	80031a6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a1d      	ldr	r2, [pc, #116]	; (8003220 <HAL_TIM_PWM_Start+0x14c>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d018      	beq.n	80031e2 <HAL_TIM_PWM_Start+0x10e>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031b8:	d013      	beq.n	80031e2 <HAL_TIM_PWM_Start+0x10e>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a19      	ldr	r2, [pc, #100]	; (8003224 <HAL_TIM_PWM_Start+0x150>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d00e      	beq.n	80031e2 <HAL_TIM_PWM_Start+0x10e>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a17      	ldr	r2, [pc, #92]	; (8003228 <HAL_TIM_PWM_Start+0x154>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d009      	beq.n	80031e2 <HAL_TIM_PWM_Start+0x10e>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a16      	ldr	r2, [pc, #88]	; (800322c <HAL_TIM_PWM_Start+0x158>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d004      	beq.n	80031e2 <HAL_TIM_PWM_Start+0x10e>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a14      	ldr	r2, [pc, #80]	; (8003230 <HAL_TIM_PWM_Start+0x15c>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d111      	bne.n	8003206 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f003 0307 	and.w	r3, r3, #7
 80031ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2b06      	cmp	r3, #6
 80031f2:	d010      	beq.n	8003216 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f042 0201 	orr.w	r2, r2, #1
 8003202:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003204:	e007      	b.n	8003216 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f042 0201 	orr.w	r2, r2, #1
 8003214:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40010000 	.word	0x40010000
 8003224:	40000400 	.word	0x40000400
 8003228:	40000800 	.word	0x40000800
 800322c:	40000c00 	.word	0x40000c00
 8003230:	40014000 	.word	0x40014000

08003234 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e041      	b.n	80032ca <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d106      	bne.n	8003260 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f839 	bl	80032d2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2202      	movs	r2, #2
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3304      	adds	r3, #4
 8003270:	4619      	mov	r1, r3
 8003272:	4610      	mov	r0, r2
 8003274:	f000 fe28 	bl	8003ec8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
	...

080032e8 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
 80032f4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80032f6:	2300      	movs	r3, #0
 80032f8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d104      	bne.n	800330a <HAL_TIM_IC_Start_DMA+0x22>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003306:	b2db      	uxtb	r3, r3
 8003308:	e013      	b.n	8003332 <HAL_TIM_IC_Start_DMA+0x4a>
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	2b04      	cmp	r3, #4
 800330e:	d104      	bne.n	800331a <HAL_TIM_IC_Start_DMA+0x32>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003316:	b2db      	uxtb	r3, r3
 8003318:	e00b      	b.n	8003332 <HAL_TIM_IC_Start_DMA+0x4a>
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	2b08      	cmp	r3, #8
 800331e:	d104      	bne.n	800332a <HAL_TIM_IC_Start_DMA+0x42>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003326:	b2db      	uxtb	r3, r3
 8003328:	e003      	b.n	8003332 <HAL_TIM_IC_Start_DMA+0x4a>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003330:	b2db      	uxtb	r3, r3
 8003332:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d104      	bne.n	8003344 <HAL_TIM_IC_Start_DMA+0x5c>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003340:	b2db      	uxtb	r3, r3
 8003342:	e013      	b.n	800336c <HAL_TIM_IC_Start_DMA+0x84>
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	2b04      	cmp	r3, #4
 8003348:	d104      	bne.n	8003354 <HAL_TIM_IC_Start_DMA+0x6c>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003350:	b2db      	uxtb	r3, r3
 8003352:	e00b      	b.n	800336c <HAL_TIM_IC_Start_DMA+0x84>
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	2b08      	cmp	r3, #8
 8003358:	d104      	bne.n	8003364 <HAL_TIM_IC_Start_DMA+0x7c>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003360:	b2db      	uxtb	r3, r3
 8003362:	e003      	b.n	800336c <HAL_TIM_IC_Start_DMA+0x84>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800336a:	b2db      	uxtb	r3, r3
 800336c:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 800336e:	7dbb      	ldrb	r3, [r7, #22]
 8003370:	2b02      	cmp	r3, #2
 8003372:	d002      	beq.n	800337a <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8003374:	7d7b      	ldrb	r3, [r7, #21]
 8003376:	2b02      	cmp	r3, #2
 8003378:	d101      	bne.n	800337e <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 800337a:	2302      	movs	r3, #2
 800337c:	e13c      	b.n	80035f8 <HAL_TIM_IC_Start_DMA+0x310>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 800337e:	7dbb      	ldrb	r3, [r7, #22]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d143      	bne.n	800340c <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8003384:	7d7b      	ldrb	r3, [r7, #21]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d140      	bne.n	800340c <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d104      	bne.n	800339a <HAL_TIM_IC_Start_DMA+0xb2>
 8003390:	887b      	ldrh	r3, [r7, #2]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e12e      	b.n	80035f8 <HAL_TIM_IC_Start_DMA+0x310>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d104      	bne.n	80033aa <HAL_TIM_IC_Start_DMA+0xc2>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2202      	movs	r2, #2
 80033a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033a8:	e013      	b.n	80033d2 <HAL_TIM_IC_Start_DMA+0xea>
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	2b04      	cmp	r3, #4
 80033ae:	d104      	bne.n	80033ba <HAL_TIM_IC_Start_DMA+0xd2>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2202      	movs	r2, #2
 80033b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033b8:	e00b      	b.n	80033d2 <HAL_TIM_IC_Start_DMA+0xea>
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	2b08      	cmp	r3, #8
 80033be:	d104      	bne.n	80033ca <HAL_TIM_IC_Start_DMA+0xe2>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2202      	movs	r2, #2
 80033c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033c8:	e003      	b.n	80033d2 <HAL_TIM_IC_Start_DMA+0xea>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2202      	movs	r2, #2
 80033ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d104      	bne.n	80033e2 <HAL_TIM_IC_Start_DMA+0xfa>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2202      	movs	r2, #2
 80033dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 80033e0:	e016      	b.n	8003410 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	2b04      	cmp	r3, #4
 80033e6:	d104      	bne.n	80033f2 <HAL_TIM_IC_Start_DMA+0x10a>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2202      	movs	r2, #2
 80033ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 80033f0:	e00e      	b.n	8003410 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	d104      	bne.n	8003402 <HAL_TIM_IC_Start_DMA+0x11a>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2202      	movs	r2, #2
 80033fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 8003400:	e006      	b.n	8003410 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2202      	movs	r2, #2
 8003406:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 800340a:	e001      	b.n	8003410 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e0f3      	b.n	80035f8 <HAL_TIM_IC_Start_DMA+0x310>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2201      	movs	r2, #1
 8003416:	68b9      	ldr	r1, [r7, #8]
 8003418:	4618      	mov	r0, r3
 800341a:	f001 f919 	bl	8004650 <TIM_CCxChannelCmd>

  switch (Channel)
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	2b0c      	cmp	r3, #12
 8003422:	f200 80ad 	bhi.w	8003580 <HAL_TIM_IC_Start_DMA+0x298>
 8003426:	a201      	add	r2, pc, #4	; (adr r2, 800342c <HAL_TIM_IC_Start_DMA+0x144>)
 8003428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800342c:	08003461 	.word	0x08003461
 8003430:	08003581 	.word	0x08003581
 8003434:	08003581 	.word	0x08003581
 8003438:	08003581 	.word	0x08003581
 800343c:	080034a9 	.word	0x080034a9
 8003440:	08003581 	.word	0x08003581
 8003444:	08003581 	.word	0x08003581
 8003448:	08003581 	.word	0x08003581
 800344c:	080034f1 	.word	0x080034f1
 8003450:	08003581 	.word	0x08003581
 8003454:	08003581 	.word	0x08003581
 8003458:	08003581 	.word	0x08003581
 800345c:	08003539 	.word	0x08003539
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003464:	4a66      	ldr	r2, [pc, #408]	; (8003600 <HAL_TIM_IC_Start_DMA+0x318>)
 8003466:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	4a65      	ldr	r2, [pc, #404]	; (8003604 <HAL_TIM_IC_Start_DMA+0x31c>)
 800346e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	4a64      	ldr	r2, [pc, #400]	; (8003608 <HAL_TIM_IC_Start_DMA+0x320>)
 8003476:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	3334      	adds	r3, #52	; 0x34
 8003482:	4619      	mov	r1, r3
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	887b      	ldrh	r3, [r7, #2]
 8003488:	f7fe fc28 	bl	8001cdc <HAL_DMA_Start_IT>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e0b0      	b.n	80035f8 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68da      	ldr	r2, [r3, #12]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034a4:	60da      	str	r2, [r3, #12]
      break;
 80034a6:	e06e      	b.n	8003586 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ac:	4a54      	ldr	r2, [pc, #336]	; (8003600 <HAL_TIM_IC_Start_DMA+0x318>)
 80034ae:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b4:	4a53      	ldr	r2, [pc, #332]	; (8003604 <HAL_TIM_IC_Start_DMA+0x31c>)
 80034b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034bc:	4a52      	ldr	r2, [pc, #328]	; (8003608 <HAL_TIM_IC_Start_DMA+0x320>)
 80034be:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	3338      	adds	r3, #56	; 0x38
 80034ca:	4619      	mov	r1, r3
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	887b      	ldrh	r3, [r7, #2]
 80034d0:	f7fe fc04 	bl	8001cdc <HAL_DMA_Start_IT>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e08c      	b.n	80035f8 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68da      	ldr	r2, [r3, #12]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034ec:	60da      	str	r2, [r3, #12]
      break;
 80034ee:	e04a      	b.n	8003586 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f4:	4a42      	ldr	r2, [pc, #264]	; (8003600 <HAL_TIM_IC_Start_DMA+0x318>)
 80034f6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fc:	4a41      	ldr	r2, [pc, #260]	; (8003604 <HAL_TIM_IC_Start_DMA+0x31c>)
 80034fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003504:	4a40      	ldr	r2, [pc, #256]	; (8003608 <HAL_TIM_IC_Start_DMA+0x320>)
 8003506:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	333c      	adds	r3, #60	; 0x3c
 8003512:	4619      	mov	r1, r3
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	887b      	ldrh	r3, [r7, #2]
 8003518:	f7fe fbe0 	bl	8001cdc <HAL_DMA_Start_IT>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e068      	b.n	80035f8 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68da      	ldr	r2, [r3, #12]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003534:	60da      	str	r2, [r3, #12]
      break;
 8003536:	e026      	b.n	8003586 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353c:	4a30      	ldr	r2, [pc, #192]	; (8003600 <HAL_TIM_IC_Start_DMA+0x318>)
 800353e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003544:	4a2f      	ldr	r2, [pc, #188]	; (8003604 <HAL_TIM_IC_Start_DMA+0x31c>)
 8003546:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354c:	4a2e      	ldr	r2, [pc, #184]	; (8003608 <HAL_TIM_IC_Start_DMA+0x320>)
 800354e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	3340      	adds	r3, #64	; 0x40
 800355a:	4619      	mov	r1, r3
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	887b      	ldrh	r3, [r7, #2]
 8003560:	f7fe fbbc 	bl	8001cdc <HAL_DMA_Start_IT>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e044      	b.n	80035f8 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68da      	ldr	r2, [r3, #12]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800357c:	60da      	str	r2, [r3, #12]
      break;
 800357e:	e002      	b.n	8003586 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	75fb      	strb	r3, [r7, #23]
      break;
 8003584:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a20      	ldr	r2, [pc, #128]	; (800360c <HAL_TIM_IC_Start_DMA+0x324>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d018      	beq.n	80035c2 <HAL_TIM_IC_Start_DMA+0x2da>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003598:	d013      	beq.n	80035c2 <HAL_TIM_IC_Start_DMA+0x2da>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a1c      	ldr	r2, [pc, #112]	; (8003610 <HAL_TIM_IC_Start_DMA+0x328>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d00e      	beq.n	80035c2 <HAL_TIM_IC_Start_DMA+0x2da>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a1a      	ldr	r2, [pc, #104]	; (8003614 <HAL_TIM_IC_Start_DMA+0x32c>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d009      	beq.n	80035c2 <HAL_TIM_IC_Start_DMA+0x2da>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a19      	ldr	r2, [pc, #100]	; (8003618 <HAL_TIM_IC_Start_DMA+0x330>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d004      	beq.n	80035c2 <HAL_TIM_IC_Start_DMA+0x2da>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a17      	ldr	r2, [pc, #92]	; (800361c <HAL_TIM_IC_Start_DMA+0x334>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d111      	bne.n	80035e6 <HAL_TIM_IC_Start_DMA+0x2fe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f003 0307 	and.w	r3, r3, #7
 80035cc:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	2b06      	cmp	r3, #6
 80035d2:	d010      	beq.n	80035f6 <HAL_TIM_IC_Start_DMA+0x30e>
    {
      __HAL_TIM_ENABLE(htim);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0201 	orr.w	r2, r2, #1
 80035e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035e4:	e007      	b.n	80035f6 <HAL_TIM_IC_Start_DMA+0x30e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f042 0201 	orr.w	r2, r2, #1
 80035f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80035f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3718      	adds	r7, #24
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	08003d99 	.word	0x08003d99
 8003604:	08003e61 	.word	0x08003e61
 8003608:	08003d07 	.word	0x08003d07
 800360c:	40010000 	.word	0x40010000
 8003610:	40000400 	.word	0x40000400
 8003614:	40000800 	.word	0x40000800
 8003618:	40000c00 	.word	0x40000c00
 800361c:	40014000 	.word	0x40014000

08003620 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b02      	cmp	r3, #2
 8003634:	d122      	bne.n	800367c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b02      	cmp	r3, #2
 8003642:	d11b      	bne.n	800367c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f06f 0202 	mvn.w	r2, #2
 800364c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	f003 0303 	and.w	r3, r3, #3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 fb1d 	bl	8003ca2 <HAL_TIM_IC_CaptureCallback>
 8003668:	e005      	b.n	8003676 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 fb0f 	bl	8003c8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 fb2a 	bl	8003cca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	f003 0304 	and.w	r3, r3, #4
 8003686:	2b04      	cmp	r3, #4
 8003688:	d122      	bne.n	80036d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	f003 0304 	and.w	r3, r3, #4
 8003694:	2b04      	cmp	r3, #4
 8003696:	d11b      	bne.n	80036d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f06f 0204 	mvn.w	r2, #4
 80036a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2202      	movs	r2, #2
 80036a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d003      	beq.n	80036be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 faf3 	bl	8003ca2 <HAL_TIM_IC_CaptureCallback>
 80036bc:	e005      	b.n	80036ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 fae5 	bl	8003c8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 fb00 	bl	8003cca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	f003 0308 	and.w	r3, r3, #8
 80036da:	2b08      	cmp	r3, #8
 80036dc:	d122      	bne.n	8003724 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	f003 0308 	and.w	r3, r3, #8
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	d11b      	bne.n	8003724 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f06f 0208 	mvn.w	r2, #8
 80036f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2204      	movs	r2, #4
 80036fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	f003 0303 	and.w	r3, r3, #3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d003      	beq.n	8003712 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 fac9 	bl	8003ca2 <HAL_TIM_IC_CaptureCallback>
 8003710:	e005      	b.n	800371e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 fabb 	bl	8003c8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 fad6 	bl	8003cca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	f003 0310 	and.w	r3, r3, #16
 800372e:	2b10      	cmp	r3, #16
 8003730:	d122      	bne.n	8003778 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	f003 0310 	and.w	r3, r3, #16
 800373c:	2b10      	cmp	r3, #16
 800373e:	d11b      	bne.n	8003778 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f06f 0210 	mvn.w	r2, #16
 8003748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2208      	movs	r2, #8
 800374e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800375a:	2b00      	cmp	r3, #0
 800375c:	d003      	beq.n	8003766 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 fa9f 	bl	8003ca2 <HAL_TIM_IC_CaptureCallback>
 8003764:	e005      	b.n	8003772 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 fa91 	bl	8003c8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 faac 	bl	8003cca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b01      	cmp	r3, #1
 8003784:	d10e      	bne.n	80037a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	2b01      	cmp	r3, #1
 8003792:	d107      	bne.n	80037a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f06f 0201 	mvn.w	r2, #1
 800379c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 fa6b 	bl	8003c7a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ae:	2b80      	cmp	r3, #128	; 0x80
 80037b0:	d10e      	bne.n	80037d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037bc:	2b80      	cmp	r3, #128	; 0x80
 80037be:	d107      	bne.n	80037d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f001 f830 	bl	8004830 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037da:	2b40      	cmp	r3, #64	; 0x40
 80037dc:	d10e      	bne.n	80037fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e8:	2b40      	cmp	r3, #64	; 0x40
 80037ea:	d107      	bne.n	80037fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 fa71 	bl	8003cde <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	f003 0320 	and.w	r3, r3, #32
 8003806:	2b20      	cmp	r3, #32
 8003808:	d10e      	bne.n	8003828 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	f003 0320 	and.w	r3, r3, #32
 8003814:	2b20      	cmp	r3, #32
 8003816:	d107      	bne.n	8003828 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f06f 0220 	mvn.w	r2, #32
 8003820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 fffa 	bl	800481c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003828:	bf00      	nop
 800382a:	3708      	adds	r7, #8
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800383c:	2300      	movs	r3, #0
 800383e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003846:	2b01      	cmp	r3, #1
 8003848:	d101      	bne.n	800384e <HAL_TIM_IC_ConfigChannel+0x1e>
 800384a:	2302      	movs	r3, #2
 800384c:	e088      	b.n	8003960 <HAL_TIM_IC_ConfigChannel+0x130>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d11b      	bne.n	8003894 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6818      	ldr	r0, [r3, #0]
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	6819      	ldr	r1, [r3, #0]
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f000 fd38 	bl	80042e0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	699a      	ldr	r2, [r3, #24]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 020c 	bic.w	r2, r2, #12
 800387e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6999      	ldr	r1, [r3, #24]
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	689a      	ldr	r2, [r3, #8]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	430a      	orrs	r2, r1
 8003890:	619a      	str	r2, [r3, #24]
 8003892:	e060      	b.n	8003956 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b04      	cmp	r3, #4
 8003898:	d11c      	bne.n	80038d4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6818      	ldr	r0, [r3, #0]
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	6819      	ldr	r1, [r3, #0]
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	f000 fdb0 	bl	800440e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	699a      	ldr	r2, [r3, #24]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80038bc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6999      	ldr	r1, [r3, #24]
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	021a      	lsls	r2, r3, #8
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	619a      	str	r2, [r3, #24]
 80038d2:	e040      	b.n	8003956 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b08      	cmp	r3, #8
 80038d8:	d11b      	bne.n	8003912 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6818      	ldr	r0, [r3, #0]
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	6819      	ldr	r1, [r3, #0]
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	685a      	ldr	r2, [r3, #4]
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	f000 fdfd 	bl	80044e8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	69da      	ldr	r2, [r3, #28]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 020c 	bic.w	r2, r2, #12
 80038fc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	69d9      	ldr	r1, [r3, #28]
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	689a      	ldr	r2, [r3, #8]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	61da      	str	r2, [r3, #28]
 8003910:	e021      	b.n	8003956 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b0c      	cmp	r3, #12
 8003916:	d11c      	bne.n	8003952 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6818      	ldr	r0, [r3, #0]
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	6819      	ldr	r1, [r3, #0]
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	685a      	ldr	r2, [r3, #4]
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	f000 fe1a 	bl	8004560 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	69da      	ldr	r2, [r3, #28]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800393a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	69d9      	ldr	r1, [r3, #28]
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	021a      	lsls	r2, r3, #8
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	430a      	orrs	r2, r1
 800394e:	61da      	str	r2, [r3, #28]
 8003950:	e001      	b.n	8003956 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800395e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003960:	4618      	mov	r0, r3
 8003962:	3718      	adds	r7, #24
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003974:	2300      	movs	r3, #0
 8003976:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800397e:	2b01      	cmp	r3, #1
 8003980:	d101      	bne.n	8003986 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003982:	2302      	movs	r3, #2
 8003984:	e0ae      	b.n	8003ae4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2b0c      	cmp	r3, #12
 8003992:	f200 809f 	bhi.w	8003ad4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003996:	a201      	add	r2, pc, #4	; (adr r2, 800399c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800399c:	080039d1 	.word	0x080039d1
 80039a0:	08003ad5 	.word	0x08003ad5
 80039a4:	08003ad5 	.word	0x08003ad5
 80039a8:	08003ad5 	.word	0x08003ad5
 80039ac:	08003a11 	.word	0x08003a11
 80039b0:	08003ad5 	.word	0x08003ad5
 80039b4:	08003ad5 	.word	0x08003ad5
 80039b8:	08003ad5 	.word	0x08003ad5
 80039bc:	08003a53 	.word	0x08003a53
 80039c0:	08003ad5 	.word	0x08003ad5
 80039c4:	08003ad5 	.word	0x08003ad5
 80039c8:	08003ad5 	.word	0x08003ad5
 80039cc:	08003a93 	.word	0x08003a93
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68b9      	ldr	r1, [r7, #8]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 faf6 	bl	8003fc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	699a      	ldr	r2, [r3, #24]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f042 0208 	orr.w	r2, r2, #8
 80039ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	699a      	ldr	r2, [r3, #24]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0204 	bic.w	r2, r2, #4
 80039fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6999      	ldr	r1, [r3, #24]
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	691a      	ldr	r2, [r3, #16]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	619a      	str	r2, [r3, #24]
      break;
 8003a0e:	e064      	b.n	8003ada <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68b9      	ldr	r1, [r7, #8]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f000 fb3c 	bl	8004094 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	699a      	ldr	r2, [r3, #24]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	699a      	ldr	r2, [r3, #24]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6999      	ldr	r1, [r3, #24]
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	021a      	lsls	r2, r3, #8
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	619a      	str	r2, [r3, #24]
      break;
 8003a50:	e043      	b.n	8003ada <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68b9      	ldr	r1, [r7, #8]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f000 fb87 	bl	800416c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	69da      	ldr	r2, [r3, #28]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f042 0208 	orr.w	r2, r2, #8
 8003a6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	69da      	ldr	r2, [r3, #28]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f022 0204 	bic.w	r2, r2, #4
 8003a7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	69d9      	ldr	r1, [r3, #28]
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	691a      	ldr	r2, [r3, #16]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	61da      	str	r2, [r3, #28]
      break;
 8003a90:	e023      	b.n	8003ada <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68b9      	ldr	r1, [r7, #8]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f000 fbd1 	bl	8004240 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	69da      	ldr	r2, [r3, #28]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003aac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	69da      	ldr	r2, [r3, #28]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003abc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	69d9      	ldr	r1, [r3, #28]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	021a      	lsls	r2, r3, #8
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	61da      	str	r2, [r3, #28]
      break;
 8003ad2:	e002      	b.n	8003ada <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ad8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ae2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3718      	adds	r7, #24
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003af6:	2300      	movs	r3, #0
 8003af8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d101      	bne.n	8003b08 <HAL_TIM_ConfigClockSource+0x1c>
 8003b04:	2302      	movs	r3, #2
 8003b06:	e0b4      	b.n	8003c72 <HAL_TIM_ConfigClockSource+0x186>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2202      	movs	r2, #2
 8003b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68ba      	ldr	r2, [r7, #8]
 8003b36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b40:	d03e      	beq.n	8003bc0 <HAL_TIM_ConfigClockSource+0xd4>
 8003b42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b46:	f200 8087 	bhi.w	8003c58 <HAL_TIM_ConfigClockSource+0x16c>
 8003b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b4e:	f000 8086 	beq.w	8003c5e <HAL_TIM_ConfigClockSource+0x172>
 8003b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b56:	d87f      	bhi.n	8003c58 <HAL_TIM_ConfigClockSource+0x16c>
 8003b58:	2b70      	cmp	r3, #112	; 0x70
 8003b5a:	d01a      	beq.n	8003b92 <HAL_TIM_ConfigClockSource+0xa6>
 8003b5c:	2b70      	cmp	r3, #112	; 0x70
 8003b5e:	d87b      	bhi.n	8003c58 <HAL_TIM_ConfigClockSource+0x16c>
 8003b60:	2b60      	cmp	r3, #96	; 0x60
 8003b62:	d050      	beq.n	8003c06 <HAL_TIM_ConfigClockSource+0x11a>
 8003b64:	2b60      	cmp	r3, #96	; 0x60
 8003b66:	d877      	bhi.n	8003c58 <HAL_TIM_ConfigClockSource+0x16c>
 8003b68:	2b50      	cmp	r3, #80	; 0x50
 8003b6a:	d03c      	beq.n	8003be6 <HAL_TIM_ConfigClockSource+0xfa>
 8003b6c:	2b50      	cmp	r3, #80	; 0x50
 8003b6e:	d873      	bhi.n	8003c58 <HAL_TIM_ConfigClockSource+0x16c>
 8003b70:	2b40      	cmp	r3, #64	; 0x40
 8003b72:	d058      	beq.n	8003c26 <HAL_TIM_ConfigClockSource+0x13a>
 8003b74:	2b40      	cmp	r3, #64	; 0x40
 8003b76:	d86f      	bhi.n	8003c58 <HAL_TIM_ConfigClockSource+0x16c>
 8003b78:	2b30      	cmp	r3, #48	; 0x30
 8003b7a:	d064      	beq.n	8003c46 <HAL_TIM_ConfigClockSource+0x15a>
 8003b7c:	2b30      	cmp	r3, #48	; 0x30
 8003b7e:	d86b      	bhi.n	8003c58 <HAL_TIM_ConfigClockSource+0x16c>
 8003b80:	2b20      	cmp	r3, #32
 8003b82:	d060      	beq.n	8003c46 <HAL_TIM_ConfigClockSource+0x15a>
 8003b84:	2b20      	cmp	r3, #32
 8003b86:	d867      	bhi.n	8003c58 <HAL_TIM_ConfigClockSource+0x16c>
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d05c      	beq.n	8003c46 <HAL_TIM_ConfigClockSource+0x15a>
 8003b8c:	2b10      	cmp	r3, #16
 8003b8e:	d05a      	beq.n	8003c46 <HAL_TIM_ConfigClockSource+0x15a>
 8003b90:	e062      	b.n	8003c58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6818      	ldr	r0, [r3, #0]
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	6899      	ldr	r1, [r3, #8]
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	f000 fd35 	bl	8004610 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003bb4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	609a      	str	r2, [r3, #8]
      break;
 8003bbe:	e04f      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6818      	ldr	r0, [r3, #0]
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	6899      	ldr	r1, [r3, #8]
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685a      	ldr	r2, [r3, #4]
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	f000 fd1e 	bl	8004610 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689a      	ldr	r2, [r3, #8]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003be2:	609a      	str	r2, [r3, #8]
      break;
 8003be4:	e03c      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6818      	ldr	r0, [r3, #0]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	6859      	ldr	r1, [r3, #4]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	f000 fbdc 	bl	80043b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2150      	movs	r1, #80	; 0x50
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 fceb 	bl	80045da <TIM_ITRx_SetConfig>
      break;
 8003c04:	e02c      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6818      	ldr	r0, [r3, #0]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	6859      	ldr	r1, [r3, #4]
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	461a      	mov	r2, r3
 8003c14:	f000 fc38 	bl	8004488 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2160      	movs	r1, #96	; 0x60
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 fcdb 	bl	80045da <TIM_ITRx_SetConfig>
      break;
 8003c24:	e01c      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6818      	ldr	r0, [r3, #0]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	6859      	ldr	r1, [r3, #4]
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	461a      	mov	r2, r3
 8003c34:	f000 fbbc 	bl	80043b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2140      	movs	r1, #64	; 0x40
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 fccb 	bl	80045da <TIM_ITRx_SetConfig>
      break;
 8003c44:	e00c      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4619      	mov	r1, r3
 8003c50:	4610      	mov	r0, r2
 8003c52:	f000 fcc2 	bl	80045da <TIM_ITRx_SetConfig>
      break;
 8003c56:	e003      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c5c:	e000      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3710      	adds	r7, #16
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003c82:	bf00      	nop
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr

08003c8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	b083      	sub	sp, #12
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c96:	bf00      	nop
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr

08003ca2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	b083      	sub	sp, #12
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003caa:	bf00      	nop
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr

08003cb6 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b083      	sub	sp, #12
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8003cbe:	bf00      	nop
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr

08003cca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b083      	sub	sp, #12
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cd2:	bf00      	nop
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b083      	sub	sp, #12
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ce6:	bf00      	nop
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003cfa:	bf00      	nop
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b084      	sub	sp, #16
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d12:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d107      	bne.n	8003d2e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2201      	movs	r2, #1
 8003d22:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d2c:	e02a      	b.n	8003d84 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d107      	bne.n	8003d48 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d46:	e01d      	b.n	8003d84 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d107      	bne.n	8003d62 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2204      	movs	r2, #4
 8003d56:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d60:	e010      	b.n	8003d84 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d107      	bne.n	8003d7c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2208      	movs	r2, #8
 8003d70:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d7a:	e003      	b.n	8003d84 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f7ff ffb4 	bl	8003cf2 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	771a      	strb	r2, [r3, #28]
}
 8003d90:	bf00      	nop
 8003d92:	3710      	adds	r7, #16
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d10f      	bne.n	8003dd0 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2201      	movs	r2, #1
 8003db4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	69db      	ldr	r3, [r3, #28]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d146      	bne.n	8003e4c <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dce:	e03d      	b.n	8003e4c <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d10f      	bne.n	8003dfa <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2202      	movs	r2, #2
 8003dde:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d131      	bne.n	8003e4c <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003df8:	e028      	b.n	8003e4c <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d10f      	bne.n	8003e24 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2204      	movs	r2, #4
 8003e08:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d11c      	bne.n	8003e4c <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e22:	e013      	b.n	8003e4c <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d10e      	bne.n	8003e4c <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2208      	movs	r2, #8
 8003e32:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d107      	bne.n	8003e4c <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f7ff ff28 	bl	8003ca2 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	771a      	strb	r2, [r3, #28]
}
 8003e58:	bf00      	nop
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d103      	bne.n	8003e80 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	771a      	strb	r2, [r3, #28]
 8003e7e:	e019      	b.n	8003eb4 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d103      	bne.n	8003e92 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2202      	movs	r2, #2
 8003e8e:	771a      	strb	r2, [r3, #28]
 8003e90:	e010      	b.n	8003eb4 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d103      	bne.n	8003ea4 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2204      	movs	r2, #4
 8003ea0:	771a      	strb	r2, [r3, #28]
 8003ea2:	e007      	b.n	8003eb4 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d102      	bne.n	8003eb4 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2208      	movs	r2, #8
 8003eb2:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f7ff fefe 	bl	8003cb6 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	771a      	strb	r2, [r3, #28]
}
 8003ec0:	bf00      	nop
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a34      	ldr	r2, [pc, #208]	; (8003fac <TIM_Base_SetConfig+0xe4>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d00f      	beq.n	8003f00 <TIM_Base_SetConfig+0x38>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee6:	d00b      	beq.n	8003f00 <TIM_Base_SetConfig+0x38>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a31      	ldr	r2, [pc, #196]	; (8003fb0 <TIM_Base_SetConfig+0xe8>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d007      	beq.n	8003f00 <TIM_Base_SetConfig+0x38>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a30      	ldr	r2, [pc, #192]	; (8003fb4 <TIM_Base_SetConfig+0xec>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d003      	beq.n	8003f00 <TIM_Base_SetConfig+0x38>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a2f      	ldr	r2, [pc, #188]	; (8003fb8 <TIM_Base_SetConfig+0xf0>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d108      	bne.n	8003f12 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a25      	ldr	r2, [pc, #148]	; (8003fac <TIM_Base_SetConfig+0xe4>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d01b      	beq.n	8003f52 <TIM_Base_SetConfig+0x8a>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f20:	d017      	beq.n	8003f52 <TIM_Base_SetConfig+0x8a>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a22      	ldr	r2, [pc, #136]	; (8003fb0 <TIM_Base_SetConfig+0xe8>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d013      	beq.n	8003f52 <TIM_Base_SetConfig+0x8a>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a21      	ldr	r2, [pc, #132]	; (8003fb4 <TIM_Base_SetConfig+0xec>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d00f      	beq.n	8003f52 <TIM_Base_SetConfig+0x8a>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a20      	ldr	r2, [pc, #128]	; (8003fb8 <TIM_Base_SetConfig+0xf0>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d00b      	beq.n	8003f52 <TIM_Base_SetConfig+0x8a>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a1f      	ldr	r2, [pc, #124]	; (8003fbc <TIM_Base_SetConfig+0xf4>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d007      	beq.n	8003f52 <TIM_Base_SetConfig+0x8a>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a1e      	ldr	r2, [pc, #120]	; (8003fc0 <TIM_Base_SetConfig+0xf8>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d003      	beq.n	8003f52 <TIM_Base_SetConfig+0x8a>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a1d      	ldr	r2, [pc, #116]	; (8003fc4 <TIM_Base_SetConfig+0xfc>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d108      	bne.n	8003f64 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a08      	ldr	r2, [pc, #32]	; (8003fac <TIM_Base_SetConfig+0xe4>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d103      	bne.n	8003f98 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	691a      	ldr	r2, [r3, #16]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	615a      	str	r2, [r3, #20]
}
 8003f9e:	bf00      	nop
 8003fa0:	3714      	adds	r7, #20
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	40010000 	.word	0x40010000
 8003fb0:	40000400 	.word	0x40000400
 8003fb4:	40000800 	.word	0x40000800
 8003fb8:	40000c00 	.word	0x40000c00
 8003fbc:	40014000 	.word	0x40014000
 8003fc0:	40014400 	.word	0x40014400
 8003fc4:	40014800 	.word	0x40014800

08003fc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b087      	sub	sp, #28
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	f023 0201 	bic.w	r2, r3, #1
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f023 0303 	bic.w	r3, r3, #3
 8003ffe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	4313      	orrs	r3, r2
 8004008:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	f023 0302 	bic.w	r3, r3, #2
 8004010:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	4313      	orrs	r3, r2
 800401a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a1c      	ldr	r2, [pc, #112]	; (8004090 <TIM_OC1_SetConfig+0xc8>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d10c      	bne.n	800403e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	f023 0308 	bic.w	r3, r3, #8
 800402a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	4313      	orrs	r3, r2
 8004034:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f023 0304 	bic.w	r3, r3, #4
 800403c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a13      	ldr	r2, [pc, #76]	; (8004090 <TIM_OC1_SetConfig+0xc8>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d111      	bne.n	800406a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800404c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004054:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	4313      	orrs	r3, r2
 800405e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	4313      	orrs	r3, r2
 8004068:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	621a      	str	r2, [r3, #32]
}
 8004084:	bf00      	nop
 8004086:	371c      	adds	r7, #28
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr
 8004090:	40010000 	.word	0x40010000

08004094 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004094:	b480      	push	{r7}
 8004096:	b087      	sub	sp, #28
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	f023 0210 	bic.w	r2, r3, #16
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	021b      	lsls	r3, r3, #8
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f023 0320 	bic.w	r3, r3, #32
 80040de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	011b      	lsls	r3, r3, #4
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a1e      	ldr	r2, [pc, #120]	; (8004168 <TIM_OC2_SetConfig+0xd4>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d10d      	bne.n	8004110 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	011b      	lsls	r3, r3, #4
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	4313      	orrs	r3, r2
 8004106:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800410e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a15      	ldr	r2, [pc, #84]	; (8004168 <TIM_OC2_SetConfig+0xd4>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d113      	bne.n	8004140 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800411e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004126:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	4313      	orrs	r3, r2
 8004132:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	4313      	orrs	r3, r2
 800413e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685a      	ldr	r2, [r3, #4]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	621a      	str	r2, [r3, #32]
}
 800415a:	bf00      	nop
 800415c:	371c      	adds	r7, #28
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	40010000 	.word	0x40010000

0800416c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800416c:	b480      	push	{r7}
 800416e:	b087      	sub	sp, #28
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800419a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f023 0303 	bic.w	r3, r3, #3
 80041a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	021b      	lsls	r3, r3, #8
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	4313      	orrs	r3, r2
 80041c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a1d      	ldr	r2, [pc, #116]	; (800423c <TIM_OC3_SetConfig+0xd0>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d10d      	bne.n	80041e6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	021b      	lsls	r3, r3, #8
 80041d8:	697a      	ldr	r2, [r7, #20]
 80041da:	4313      	orrs	r3, r2
 80041dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a14      	ldr	r2, [pc, #80]	; (800423c <TIM_OC3_SetConfig+0xd0>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d113      	bne.n	8004216 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	011b      	lsls	r3, r3, #4
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	4313      	orrs	r3, r2
 8004208:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	011b      	lsls	r3, r3, #4
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	4313      	orrs	r3, r2
 8004214:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	621a      	str	r2, [r3, #32]
}
 8004230:	bf00      	nop
 8004232:	371c      	adds	r7, #28
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	40010000 	.word	0x40010000

08004240 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004240:	b480      	push	{r7}
 8004242:	b087      	sub	sp, #28
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	69db      	ldr	r3, [r3, #28]
 8004266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800426e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004276:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	021b      	lsls	r3, r3, #8
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	4313      	orrs	r3, r2
 8004282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800428a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	031b      	lsls	r3, r3, #12
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	4313      	orrs	r3, r2
 8004296:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a10      	ldr	r2, [pc, #64]	; (80042dc <TIM_OC4_SetConfig+0x9c>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d109      	bne.n	80042b4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	019b      	lsls	r3, r3, #6
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	685a      	ldr	r2, [r3, #4]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	621a      	str	r2, [r3, #32]
}
 80042ce:	bf00      	nop
 80042d0:	371c      	adds	r7, #28
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	40010000 	.word	0x40010000

080042e0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b087      	sub	sp, #28
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
 80042ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	f023 0201 	bic.w	r2, r3, #1
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6a1b      	ldr	r3, [r3, #32]
 8004304:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	4a24      	ldr	r2, [pc, #144]	; (800439c <TIM_TI1_SetConfig+0xbc>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d013      	beq.n	8004336 <TIM_TI1_SetConfig+0x56>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004314:	d00f      	beq.n	8004336 <TIM_TI1_SetConfig+0x56>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	4a21      	ldr	r2, [pc, #132]	; (80043a0 <TIM_TI1_SetConfig+0xc0>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d00b      	beq.n	8004336 <TIM_TI1_SetConfig+0x56>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	4a20      	ldr	r2, [pc, #128]	; (80043a4 <TIM_TI1_SetConfig+0xc4>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d007      	beq.n	8004336 <TIM_TI1_SetConfig+0x56>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	4a1f      	ldr	r2, [pc, #124]	; (80043a8 <TIM_TI1_SetConfig+0xc8>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d003      	beq.n	8004336 <TIM_TI1_SetConfig+0x56>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	4a1e      	ldr	r2, [pc, #120]	; (80043ac <TIM_TI1_SetConfig+0xcc>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d101      	bne.n	800433a <TIM_TI1_SetConfig+0x5a>
 8004336:	2301      	movs	r3, #1
 8004338:	e000      	b.n	800433c <TIM_TI1_SetConfig+0x5c>
 800433a:	2300      	movs	r3, #0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d008      	beq.n	8004352 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	f023 0303 	bic.w	r3, r3, #3
 8004346:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004348:	697a      	ldr	r2, [r7, #20]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4313      	orrs	r3, r2
 800434e:	617b      	str	r3, [r7, #20]
 8004350:	e003      	b.n	800435a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	f043 0301 	orr.w	r3, r3, #1
 8004358:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004360:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	011b      	lsls	r3, r3, #4
 8004366:	b2db      	uxtb	r3, r3
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	4313      	orrs	r3, r2
 800436c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	f023 030a 	bic.w	r3, r3, #10
 8004374:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	f003 030a 	and.w	r3, r3, #10
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	4313      	orrs	r3, r2
 8004380:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	621a      	str	r2, [r3, #32]
}
 800438e:	bf00      	nop
 8004390:	371c      	adds	r7, #28
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	40010000 	.word	0x40010000
 80043a0:	40000400 	.word	0x40000400
 80043a4:	40000800 	.word	0x40000800
 80043a8:	40000c00 	.word	0x40000c00
 80043ac:	40014000 	.word	0x40014000

080043b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b087      	sub	sp, #28
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6a1b      	ldr	r3, [r3, #32]
 80043c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	f023 0201 	bic.w	r2, r3, #1
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	011b      	lsls	r3, r3, #4
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	f023 030a 	bic.w	r3, r3, #10
 80043ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043ee:	697a      	ldr	r2, [r7, #20]
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	621a      	str	r2, [r3, #32]
}
 8004402:	bf00      	nop
 8004404:	371c      	adds	r7, #28
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr

0800440e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800440e:	b480      	push	{r7}
 8004410:	b087      	sub	sp, #28
 8004412:	af00      	add	r7, sp, #0
 8004414:	60f8      	str	r0, [r7, #12]
 8004416:	60b9      	str	r1, [r7, #8]
 8004418:	607a      	str	r2, [r7, #4]
 800441a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	f023 0210 	bic.w	r2, r3, #16
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800443a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	021b      	lsls	r3, r3, #8
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	4313      	orrs	r3, r2
 8004444:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800444c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	031b      	lsls	r3, r3, #12
 8004452:	b29b      	uxth	r3, r3
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	4313      	orrs	r3, r2
 8004458:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004460:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	011b      	lsls	r3, r3, #4
 8004466:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	4313      	orrs	r3, r2
 800446e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	621a      	str	r2, [r3, #32]
}
 800447c:	bf00      	nop
 800447e:	371c      	adds	r7, #28
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004488:	b480      	push	{r7}
 800448a:	b087      	sub	sp, #28
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	f023 0210 	bic.w	r2, r3, #16
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	031b      	lsls	r3, r3, #12
 80044b8:	697a      	ldr	r2, [r7, #20]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	011b      	lsls	r3, r3, #4
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	621a      	str	r2, [r3, #32]
}
 80044dc:	bf00      	nop
 80044de:	371c      	adds	r7, #28
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b087      	sub	sp, #28
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
 80044f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6a1b      	ldr	r3, [r3, #32]
 80044fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	69db      	ldr	r3, [r3, #28]
 8004506:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6a1b      	ldr	r3, [r3, #32]
 800450c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	f023 0303 	bic.w	r3, r3, #3
 8004514:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4313      	orrs	r3, r2
 800451c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004524:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	011b      	lsls	r3, r3, #4
 800452a:	b2db      	uxtb	r3, r3
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	4313      	orrs	r3, r2
 8004530:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004538:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	021b      	lsls	r3, r3, #8
 800453e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	4313      	orrs	r3, r2
 8004546:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	621a      	str	r2, [r3, #32]
}
 8004554:	bf00      	nop
 8004556:	371c      	adds	r7, #28
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004560:	b480      	push	{r7}
 8004562:	b087      	sub	sp, #28
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
 800456c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800458c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	021b      	lsls	r3, r3, #8
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	4313      	orrs	r3, r2
 8004596:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800459e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	031b      	lsls	r3, r3, #12
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80045b2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	031b      	lsls	r3, r3, #12
 80045b8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	4313      	orrs	r3, r2
 80045c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	621a      	str	r2, [r3, #32]
}
 80045ce:	bf00      	nop
 80045d0:	371c      	adds	r7, #28
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045da:	b480      	push	{r7}
 80045dc:	b085      	sub	sp, #20
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
 80045e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	f043 0307 	orr.w	r3, r3, #7
 80045fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	609a      	str	r2, [r3, #8]
}
 8004604:	bf00      	nop
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004610:	b480      	push	{r7}
 8004612:	b087      	sub	sp, #28
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
 800461c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800462a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	021a      	lsls	r2, r3, #8
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	431a      	orrs	r2, r3
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	4313      	orrs	r3, r2
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	4313      	orrs	r3, r2
 800463c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	609a      	str	r2, [r3, #8]
}
 8004644:	bf00      	nop
 8004646:	371c      	adds	r7, #28
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004650:	b480      	push	{r7}
 8004652:	b087      	sub	sp, #28
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	f003 031f 	and.w	r3, r3, #31
 8004662:	2201      	movs	r2, #1
 8004664:	fa02 f303 	lsl.w	r3, r2, r3
 8004668:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6a1a      	ldr	r2, [r3, #32]
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	43db      	mvns	r3, r3
 8004672:	401a      	ands	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6a1a      	ldr	r2, [r3, #32]
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	f003 031f 	and.w	r3, r3, #31
 8004682:	6879      	ldr	r1, [r7, #4]
 8004684:	fa01 f303 	lsl.w	r3, r1, r3
 8004688:	431a      	orrs	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	621a      	str	r2, [r3, #32]
}
 800468e:	bf00      	nop
 8004690:	371c      	adds	r7, #28
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
	...

0800469c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d101      	bne.n	80046b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046b0:	2302      	movs	r3, #2
 80046b2:	e050      	b.n	8004756 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2202      	movs	r2, #2
 80046c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a1c      	ldr	r2, [pc, #112]	; (8004764 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d018      	beq.n	800472a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004700:	d013      	beq.n	800472a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a18      	ldr	r2, [pc, #96]	; (8004768 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d00e      	beq.n	800472a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a16      	ldr	r2, [pc, #88]	; (800476c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d009      	beq.n	800472a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a15      	ldr	r2, [pc, #84]	; (8004770 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d004      	beq.n	800472a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a13      	ldr	r2, [pc, #76]	; (8004774 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d10c      	bne.n	8004744 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004730:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	68ba      	ldr	r2, [r7, #8]
 8004738:	4313      	orrs	r3, r2
 800473a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68ba      	ldr	r2, [r7, #8]
 8004742:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3714      	adds	r7, #20
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	40010000 	.word	0x40010000
 8004768:	40000400 	.word	0x40000400
 800476c:	40000800 	.word	0x40000800
 8004770:	40000c00 	.word	0x40000c00
 8004774:	40014000 	.word	0x40014000

08004778 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004782:	2300      	movs	r3, #0
 8004784:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800478c:	2b01      	cmp	r3, #1
 800478e:	d101      	bne.n	8004794 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004790:	2302      	movs	r3, #2
 8004792:	e03d      	b.n	8004810 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	4313      	orrs	r3, r2
 80047e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	695b      	ldr	r3, [r3, #20]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	69db      	ldr	r3, [r3, #28]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3714      	adds	r7, #20
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e03f      	b.n	80048d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d106      	bne.n	8004870 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f7fc ff38 	bl	80016e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2224      	movs	r2, #36	; 0x24
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68da      	ldr	r2, [r3, #12]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004886:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 f829 	bl	80048e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	691a      	ldr	r2, [r3, #16]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800489c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	695a      	ldr	r2, [r3, #20]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68da      	ldr	r2, [r3, #12]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2220      	movs	r2, #32
 80048c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2220      	movs	r2, #32
 80048d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3708      	adds	r7, #8
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
	...

080048e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048e4:	b0c0      	sub	sp, #256	; 0x100
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80048f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048fc:	68d9      	ldr	r1, [r3, #12]
 80048fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	ea40 0301 	orr.w	r3, r0, r1
 8004908:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800490a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	431a      	orrs	r2, r3
 8004918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	431a      	orrs	r2, r3
 8004920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004924:	69db      	ldr	r3, [r3, #28]
 8004926:	4313      	orrs	r3, r2
 8004928:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800492c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004938:	f021 010c 	bic.w	r1, r1, #12
 800493c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004946:	430b      	orrs	r3, r1
 8004948:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800494a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800495a:	6999      	ldr	r1, [r3, #24]
 800495c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	ea40 0301 	orr.w	r3, r0, r1
 8004966:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	4b8f      	ldr	r3, [pc, #572]	; (8004bac <UART_SetConfig+0x2cc>)
 8004970:	429a      	cmp	r2, r3
 8004972:	d005      	beq.n	8004980 <UART_SetConfig+0xa0>
 8004974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	4b8d      	ldr	r3, [pc, #564]	; (8004bb0 <UART_SetConfig+0x2d0>)
 800497c:	429a      	cmp	r2, r3
 800497e:	d104      	bne.n	800498a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004980:	f7fe fa90 	bl	8002ea4 <HAL_RCC_GetPCLK2Freq>
 8004984:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004988:	e003      	b.n	8004992 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800498a:	f7fe fa77 	bl	8002e7c <HAL_RCC_GetPCLK1Freq>
 800498e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004996:	69db      	ldr	r3, [r3, #28]
 8004998:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800499c:	f040 810c 	bne.w	8004bb8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049a4:	2200      	movs	r2, #0
 80049a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80049aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80049ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80049b2:	4622      	mov	r2, r4
 80049b4:	462b      	mov	r3, r5
 80049b6:	1891      	adds	r1, r2, r2
 80049b8:	65b9      	str	r1, [r7, #88]	; 0x58
 80049ba:	415b      	adcs	r3, r3
 80049bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80049c2:	4621      	mov	r1, r4
 80049c4:	eb12 0801 	adds.w	r8, r2, r1
 80049c8:	4629      	mov	r1, r5
 80049ca:	eb43 0901 	adc.w	r9, r3, r1
 80049ce:	f04f 0200 	mov.w	r2, #0
 80049d2:	f04f 0300 	mov.w	r3, #0
 80049d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049e2:	4690      	mov	r8, r2
 80049e4:	4699      	mov	r9, r3
 80049e6:	4623      	mov	r3, r4
 80049e8:	eb18 0303 	adds.w	r3, r8, r3
 80049ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80049f0:	462b      	mov	r3, r5
 80049f2:	eb49 0303 	adc.w	r3, r9, r3
 80049f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80049fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a06:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004a0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a0e:	460b      	mov	r3, r1
 8004a10:	18db      	adds	r3, r3, r3
 8004a12:	653b      	str	r3, [r7, #80]	; 0x50
 8004a14:	4613      	mov	r3, r2
 8004a16:	eb42 0303 	adc.w	r3, r2, r3
 8004a1a:	657b      	str	r3, [r7, #84]	; 0x54
 8004a1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004a24:	f7fb fff6 	bl	8000a14 <__aeabi_uldivmod>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	4b61      	ldr	r3, [pc, #388]	; (8004bb4 <UART_SetConfig+0x2d4>)
 8004a2e:	fba3 2302 	umull	r2, r3, r3, r2
 8004a32:	095b      	lsrs	r3, r3, #5
 8004a34:	011c      	lsls	r4, r3, #4
 8004a36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a40:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004a48:	4642      	mov	r2, r8
 8004a4a:	464b      	mov	r3, r9
 8004a4c:	1891      	adds	r1, r2, r2
 8004a4e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a50:	415b      	adcs	r3, r3
 8004a52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a58:	4641      	mov	r1, r8
 8004a5a:	eb12 0a01 	adds.w	sl, r2, r1
 8004a5e:	4649      	mov	r1, r9
 8004a60:	eb43 0b01 	adc.w	fp, r3, r1
 8004a64:	f04f 0200 	mov.w	r2, #0
 8004a68:	f04f 0300 	mov.w	r3, #0
 8004a6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a78:	4692      	mov	sl, r2
 8004a7a:	469b      	mov	fp, r3
 8004a7c:	4643      	mov	r3, r8
 8004a7e:	eb1a 0303 	adds.w	r3, sl, r3
 8004a82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a86:	464b      	mov	r3, r9
 8004a88:	eb4b 0303 	adc.w	r3, fp, r3
 8004a8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a9c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004aa0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	18db      	adds	r3, r3, r3
 8004aa8:	643b      	str	r3, [r7, #64]	; 0x40
 8004aaa:	4613      	mov	r3, r2
 8004aac:	eb42 0303 	adc.w	r3, r2, r3
 8004ab0:	647b      	str	r3, [r7, #68]	; 0x44
 8004ab2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ab6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004aba:	f7fb ffab 	bl	8000a14 <__aeabi_uldivmod>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	4611      	mov	r1, r2
 8004ac4:	4b3b      	ldr	r3, [pc, #236]	; (8004bb4 <UART_SetConfig+0x2d4>)
 8004ac6:	fba3 2301 	umull	r2, r3, r3, r1
 8004aca:	095b      	lsrs	r3, r3, #5
 8004acc:	2264      	movs	r2, #100	; 0x64
 8004ace:	fb02 f303 	mul.w	r3, r2, r3
 8004ad2:	1acb      	subs	r3, r1, r3
 8004ad4:	00db      	lsls	r3, r3, #3
 8004ad6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004ada:	4b36      	ldr	r3, [pc, #216]	; (8004bb4 <UART_SetConfig+0x2d4>)
 8004adc:	fba3 2302 	umull	r2, r3, r3, r2
 8004ae0:	095b      	lsrs	r3, r3, #5
 8004ae2:	005b      	lsls	r3, r3, #1
 8004ae4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ae8:	441c      	add	r4, r3
 8004aea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004aee:	2200      	movs	r2, #0
 8004af0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004af4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004af8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004afc:	4642      	mov	r2, r8
 8004afe:	464b      	mov	r3, r9
 8004b00:	1891      	adds	r1, r2, r2
 8004b02:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b04:	415b      	adcs	r3, r3
 8004b06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b0c:	4641      	mov	r1, r8
 8004b0e:	1851      	adds	r1, r2, r1
 8004b10:	6339      	str	r1, [r7, #48]	; 0x30
 8004b12:	4649      	mov	r1, r9
 8004b14:	414b      	adcs	r3, r1
 8004b16:	637b      	str	r3, [r7, #52]	; 0x34
 8004b18:	f04f 0200 	mov.w	r2, #0
 8004b1c:	f04f 0300 	mov.w	r3, #0
 8004b20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004b24:	4659      	mov	r1, fp
 8004b26:	00cb      	lsls	r3, r1, #3
 8004b28:	4651      	mov	r1, sl
 8004b2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b2e:	4651      	mov	r1, sl
 8004b30:	00ca      	lsls	r2, r1, #3
 8004b32:	4610      	mov	r0, r2
 8004b34:	4619      	mov	r1, r3
 8004b36:	4603      	mov	r3, r0
 8004b38:	4642      	mov	r2, r8
 8004b3a:	189b      	adds	r3, r3, r2
 8004b3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b40:	464b      	mov	r3, r9
 8004b42:	460a      	mov	r2, r1
 8004b44:	eb42 0303 	adc.w	r3, r2, r3
 8004b48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b58:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b60:	460b      	mov	r3, r1
 8004b62:	18db      	adds	r3, r3, r3
 8004b64:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b66:	4613      	mov	r3, r2
 8004b68:	eb42 0303 	adc.w	r3, r2, r3
 8004b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004b76:	f7fb ff4d 	bl	8000a14 <__aeabi_uldivmod>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	4b0d      	ldr	r3, [pc, #52]	; (8004bb4 <UART_SetConfig+0x2d4>)
 8004b80:	fba3 1302 	umull	r1, r3, r3, r2
 8004b84:	095b      	lsrs	r3, r3, #5
 8004b86:	2164      	movs	r1, #100	; 0x64
 8004b88:	fb01 f303 	mul.w	r3, r1, r3
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	00db      	lsls	r3, r3, #3
 8004b90:	3332      	adds	r3, #50	; 0x32
 8004b92:	4a08      	ldr	r2, [pc, #32]	; (8004bb4 <UART_SetConfig+0x2d4>)
 8004b94:	fba2 2303 	umull	r2, r3, r2, r3
 8004b98:	095b      	lsrs	r3, r3, #5
 8004b9a:	f003 0207 	and.w	r2, r3, #7
 8004b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4422      	add	r2, r4
 8004ba6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ba8:	e105      	b.n	8004db6 <UART_SetConfig+0x4d6>
 8004baa:	bf00      	nop
 8004bac:	40011000 	.word	0x40011000
 8004bb0:	40011400 	.word	0x40011400
 8004bb4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004bc2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004bc6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004bca:	4642      	mov	r2, r8
 8004bcc:	464b      	mov	r3, r9
 8004bce:	1891      	adds	r1, r2, r2
 8004bd0:	6239      	str	r1, [r7, #32]
 8004bd2:	415b      	adcs	r3, r3
 8004bd4:	627b      	str	r3, [r7, #36]	; 0x24
 8004bd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004bda:	4641      	mov	r1, r8
 8004bdc:	1854      	adds	r4, r2, r1
 8004bde:	4649      	mov	r1, r9
 8004be0:	eb43 0501 	adc.w	r5, r3, r1
 8004be4:	f04f 0200 	mov.w	r2, #0
 8004be8:	f04f 0300 	mov.w	r3, #0
 8004bec:	00eb      	lsls	r3, r5, #3
 8004bee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bf2:	00e2      	lsls	r2, r4, #3
 8004bf4:	4614      	mov	r4, r2
 8004bf6:	461d      	mov	r5, r3
 8004bf8:	4643      	mov	r3, r8
 8004bfa:	18e3      	adds	r3, r4, r3
 8004bfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c00:	464b      	mov	r3, r9
 8004c02:	eb45 0303 	adc.w	r3, r5, r3
 8004c06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c1a:	f04f 0200 	mov.w	r2, #0
 8004c1e:	f04f 0300 	mov.w	r3, #0
 8004c22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c26:	4629      	mov	r1, r5
 8004c28:	008b      	lsls	r3, r1, #2
 8004c2a:	4621      	mov	r1, r4
 8004c2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c30:	4621      	mov	r1, r4
 8004c32:	008a      	lsls	r2, r1, #2
 8004c34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c38:	f7fb feec 	bl	8000a14 <__aeabi_uldivmod>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	460b      	mov	r3, r1
 8004c40:	4b60      	ldr	r3, [pc, #384]	; (8004dc4 <UART_SetConfig+0x4e4>)
 8004c42:	fba3 2302 	umull	r2, r3, r3, r2
 8004c46:	095b      	lsrs	r3, r3, #5
 8004c48:	011c      	lsls	r4, r3, #4
 8004c4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c5c:	4642      	mov	r2, r8
 8004c5e:	464b      	mov	r3, r9
 8004c60:	1891      	adds	r1, r2, r2
 8004c62:	61b9      	str	r1, [r7, #24]
 8004c64:	415b      	adcs	r3, r3
 8004c66:	61fb      	str	r3, [r7, #28]
 8004c68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c6c:	4641      	mov	r1, r8
 8004c6e:	1851      	adds	r1, r2, r1
 8004c70:	6139      	str	r1, [r7, #16]
 8004c72:	4649      	mov	r1, r9
 8004c74:	414b      	adcs	r3, r1
 8004c76:	617b      	str	r3, [r7, #20]
 8004c78:	f04f 0200 	mov.w	r2, #0
 8004c7c:	f04f 0300 	mov.w	r3, #0
 8004c80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c84:	4659      	mov	r1, fp
 8004c86:	00cb      	lsls	r3, r1, #3
 8004c88:	4651      	mov	r1, sl
 8004c8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c8e:	4651      	mov	r1, sl
 8004c90:	00ca      	lsls	r2, r1, #3
 8004c92:	4610      	mov	r0, r2
 8004c94:	4619      	mov	r1, r3
 8004c96:	4603      	mov	r3, r0
 8004c98:	4642      	mov	r2, r8
 8004c9a:	189b      	adds	r3, r3, r2
 8004c9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ca0:	464b      	mov	r3, r9
 8004ca2:	460a      	mov	r2, r1
 8004ca4:	eb42 0303 	adc.w	r3, r2, r3
 8004ca8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004cb6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004cb8:	f04f 0200 	mov.w	r2, #0
 8004cbc:	f04f 0300 	mov.w	r3, #0
 8004cc0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004cc4:	4649      	mov	r1, r9
 8004cc6:	008b      	lsls	r3, r1, #2
 8004cc8:	4641      	mov	r1, r8
 8004cca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cce:	4641      	mov	r1, r8
 8004cd0:	008a      	lsls	r2, r1, #2
 8004cd2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004cd6:	f7fb fe9d 	bl	8000a14 <__aeabi_uldivmod>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	460b      	mov	r3, r1
 8004cde:	4b39      	ldr	r3, [pc, #228]	; (8004dc4 <UART_SetConfig+0x4e4>)
 8004ce0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ce4:	095b      	lsrs	r3, r3, #5
 8004ce6:	2164      	movs	r1, #100	; 0x64
 8004ce8:	fb01 f303 	mul.w	r3, r1, r3
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	011b      	lsls	r3, r3, #4
 8004cf0:	3332      	adds	r3, #50	; 0x32
 8004cf2:	4a34      	ldr	r2, [pc, #208]	; (8004dc4 <UART_SetConfig+0x4e4>)
 8004cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf8:	095b      	lsrs	r3, r3, #5
 8004cfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cfe:	441c      	add	r4, r3
 8004d00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d04:	2200      	movs	r2, #0
 8004d06:	673b      	str	r3, [r7, #112]	; 0x70
 8004d08:	677a      	str	r2, [r7, #116]	; 0x74
 8004d0a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004d0e:	4642      	mov	r2, r8
 8004d10:	464b      	mov	r3, r9
 8004d12:	1891      	adds	r1, r2, r2
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	415b      	adcs	r3, r3
 8004d18:	60fb      	str	r3, [r7, #12]
 8004d1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d1e:	4641      	mov	r1, r8
 8004d20:	1851      	adds	r1, r2, r1
 8004d22:	6039      	str	r1, [r7, #0]
 8004d24:	4649      	mov	r1, r9
 8004d26:	414b      	adcs	r3, r1
 8004d28:	607b      	str	r3, [r7, #4]
 8004d2a:	f04f 0200 	mov.w	r2, #0
 8004d2e:	f04f 0300 	mov.w	r3, #0
 8004d32:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d36:	4659      	mov	r1, fp
 8004d38:	00cb      	lsls	r3, r1, #3
 8004d3a:	4651      	mov	r1, sl
 8004d3c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d40:	4651      	mov	r1, sl
 8004d42:	00ca      	lsls	r2, r1, #3
 8004d44:	4610      	mov	r0, r2
 8004d46:	4619      	mov	r1, r3
 8004d48:	4603      	mov	r3, r0
 8004d4a:	4642      	mov	r2, r8
 8004d4c:	189b      	adds	r3, r3, r2
 8004d4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d50:	464b      	mov	r3, r9
 8004d52:	460a      	mov	r2, r1
 8004d54:	eb42 0303 	adc.w	r3, r2, r3
 8004d58:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	663b      	str	r3, [r7, #96]	; 0x60
 8004d64:	667a      	str	r2, [r7, #100]	; 0x64
 8004d66:	f04f 0200 	mov.w	r2, #0
 8004d6a:	f04f 0300 	mov.w	r3, #0
 8004d6e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004d72:	4649      	mov	r1, r9
 8004d74:	008b      	lsls	r3, r1, #2
 8004d76:	4641      	mov	r1, r8
 8004d78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d7c:	4641      	mov	r1, r8
 8004d7e:	008a      	lsls	r2, r1, #2
 8004d80:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d84:	f7fb fe46 	bl	8000a14 <__aeabi_uldivmod>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	4b0d      	ldr	r3, [pc, #52]	; (8004dc4 <UART_SetConfig+0x4e4>)
 8004d8e:	fba3 1302 	umull	r1, r3, r3, r2
 8004d92:	095b      	lsrs	r3, r3, #5
 8004d94:	2164      	movs	r1, #100	; 0x64
 8004d96:	fb01 f303 	mul.w	r3, r1, r3
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	011b      	lsls	r3, r3, #4
 8004d9e:	3332      	adds	r3, #50	; 0x32
 8004da0:	4a08      	ldr	r2, [pc, #32]	; (8004dc4 <UART_SetConfig+0x4e4>)
 8004da2:	fba2 2303 	umull	r2, r3, r2, r3
 8004da6:	095b      	lsrs	r3, r3, #5
 8004da8:	f003 020f 	and.w	r2, r3, #15
 8004dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4422      	add	r2, r4
 8004db4:	609a      	str	r2, [r3, #8]
}
 8004db6:	bf00      	nop
 8004db8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dc2:	bf00      	nop
 8004dc4:	51eb851f 	.word	0x51eb851f

08004dc8 <__libc_init_array>:
 8004dc8:	b570      	push	{r4, r5, r6, lr}
 8004dca:	4d0d      	ldr	r5, [pc, #52]	; (8004e00 <__libc_init_array+0x38>)
 8004dcc:	4c0d      	ldr	r4, [pc, #52]	; (8004e04 <__libc_init_array+0x3c>)
 8004dce:	1b64      	subs	r4, r4, r5
 8004dd0:	10a4      	asrs	r4, r4, #2
 8004dd2:	2600      	movs	r6, #0
 8004dd4:	42a6      	cmp	r6, r4
 8004dd6:	d109      	bne.n	8004dec <__libc_init_array+0x24>
 8004dd8:	4d0b      	ldr	r5, [pc, #44]	; (8004e08 <__libc_init_array+0x40>)
 8004dda:	4c0c      	ldr	r4, [pc, #48]	; (8004e0c <__libc_init_array+0x44>)
 8004ddc:	f000 f820 	bl	8004e20 <_init>
 8004de0:	1b64      	subs	r4, r4, r5
 8004de2:	10a4      	asrs	r4, r4, #2
 8004de4:	2600      	movs	r6, #0
 8004de6:	42a6      	cmp	r6, r4
 8004de8:	d105      	bne.n	8004df6 <__libc_init_array+0x2e>
 8004dea:	bd70      	pop	{r4, r5, r6, pc}
 8004dec:	f855 3b04 	ldr.w	r3, [r5], #4
 8004df0:	4798      	blx	r3
 8004df2:	3601      	adds	r6, #1
 8004df4:	e7ee      	b.n	8004dd4 <__libc_init_array+0xc>
 8004df6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dfa:	4798      	blx	r3
 8004dfc:	3601      	adds	r6, #1
 8004dfe:	e7f2      	b.n	8004de6 <__libc_init_array+0x1e>
 8004e00:	08004e60 	.word	0x08004e60
 8004e04:	08004e60 	.word	0x08004e60
 8004e08:	08004e60 	.word	0x08004e60
 8004e0c:	08004e64 	.word	0x08004e64

08004e10 <memset>:
 8004e10:	4402      	add	r2, r0
 8004e12:	4603      	mov	r3, r0
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d100      	bne.n	8004e1a <memset+0xa>
 8004e18:	4770      	bx	lr
 8004e1a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e1e:	e7f9      	b.n	8004e14 <memset+0x4>

08004e20 <_init>:
 8004e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e22:	bf00      	nop
 8004e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e26:	bc08      	pop	{r3}
 8004e28:	469e      	mov	lr, r3
 8004e2a:	4770      	bx	lr

08004e2c <_fini>:
 8004e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e2e:	bf00      	nop
 8004e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e32:	bc08      	pop	{r3}
 8004e34:	469e      	mov	lr, r3
 8004e36:	4770      	bx	lr
